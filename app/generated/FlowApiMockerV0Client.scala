/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.0.13
 * apibuilder:0.13.0 https://app.apibuilder.io/flow/api-mocker/0.0.13/play_2_6_client
 */
package io.flow.api.mocker.v0.models {

  case class MockApi(
    name: io.flow.api.mocker.v0.models.MockApiName,
    response: io.flow.api.mocker.v0.models.MockApiResponse
  )

  case class MockApiResponse(
    httpStatusCode: Int,
    body: _root_.play.api.libs.json.JsValue,
    contentType: String = "application/json"
  )

  sealed trait MockApiName extends _root_.scala.Product with _root_.scala.Serializable

  object MockApiName {

    case object PfsInventoryCheck extends MockApiName { override def toString = "pfs_inventory_check" }
    case object PfsInventoryDecrement extends MockApiName { override def toString = "pfs_inventory_decrement" }
    case object FlowInventoryReservation extends MockApiName { override def toString = "flow_inventory_reservation" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends MockApiName

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[MockApiName] = scala.List(PfsInventoryCheck, PfsInventoryDecrement, FlowInventoryReservation)

    private[this]
    val byName: Map[String, MockApiName] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): MockApiName = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[MockApiName] = byName.get(value.toLowerCase)

  }

}

package io.flow.api.mocker.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.api.mocker.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateParser
      dateParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[org.joda.time.LocalDate] {
      def writes(x: org.joda.time.LocalDate) = {
        import org.joda.time.format.ISODateTimeFormat.date
        val str = date.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsApiMockerMockApiName = new play.api.libs.json.Reads[io.flow.api.mocker.v0.models.MockApiName] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.api.mocker.v0.models.MockApiName] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.api.mocker.v0.models.MockApiName(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.api.mocker.v0.models.MockApiName(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApiMockerMockApiName(obj: io.flow.api.mocker.v0.models.MockApiName) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectMockApiName(obj: io.flow.api.mocker.v0.models.MockApiName) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApiMockerMockApiName: play.api.libs.json.Writes[MockApiName] = {
      new play.api.libs.json.Writes[io.flow.api.mocker.v0.models.MockApiName] {
        def writes(obj: io.flow.api.mocker.v0.models.MockApiName) = {
          jsonWritesApiMockerMockApiName(obj)
        }
      }
    }

    implicit def jsonReadsApiMockerMockApi: play.api.libs.json.Reads[MockApi] = {
      (
        (__ \ "name").read[io.flow.api.mocker.v0.models.MockApiName] and
        (__ \ "response").read[io.flow.api.mocker.v0.models.MockApiResponse]
      )(MockApi.apply _)
    }

    def jsObjectMockApi(obj: io.flow.api.mocker.v0.models.MockApi): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name.toString),
        "response" -> jsObjectMockApiResponse(obj.response)
      )
    }

    implicit def jsonWritesApiMockerMockApi: play.api.libs.json.Writes[MockApi] = {
      new play.api.libs.json.Writes[io.flow.api.mocker.v0.models.MockApi] {
        def writes(obj: io.flow.api.mocker.v0.models.MockApi) = {
          jsObjectMockApi(obj)
        }
      }
    }

    implicit def jsonReadsApiMockerMockApiResponse: play.api.libs.json.Reads[MockApiResponse] = {
      (
        (__ \ "http_status_code").read[Int] and
        (__ \ "body").read[_root_.play.api.libs.json.JsValue] and
        (__ \ "content_type").read[String]
      )(MockApiResponse.apply _)
    }

    def jsObjectMockApiResponse(obj: io.flow.api.mocker.v0.models.MockApiResponse): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "http_status_code" -> play.api.libs.json.JsNumber(obj.httpStatusCode),
        "body" -> obj.body,
        "content_type" -> play.api.libs.json.JsString(obj.contentType)
      )
    }

    implicit def jsonWritesApiMockerMockApiResponse: play.api.libs.json.Writes[MockApiResponse] = {
      new play.api.libs.json.Writes[io.flow.api.mocker.v0.models.MockApiResponse] {
        def writes(obj: io.flow.api.mocker.v0.models.MockApiResponse) = {
          jsObjectMockApiResponse(obj)
        }
      }
    }
  }
}

package io.flow.api.mocker.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.api.mocker.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: MockApiName
    private[this] val enumMockApiNameNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.api.mocker.v0.models.MockApiName.all.mkString(", ")}"

    implicit val pathBindableEnumMockApiName = new PathBindable.Parsing[io.flow.api.mocker.v0.models.MockApiName] (
      MockApiName.fromString(_).get, _.toString, enumMockApiNameNotFound
    )

    implicit val queryStringBindableEnumMockApiName = new QueryStringBindable.Parsing[io.flow.api.mocker.v0.models.MockApiName](
      MockApiName.fromString(_).get, _.toString, enumMockApiNameNotFound
    )

  }

}


package io.flow.api.mocker.v0 {

  object Constants {

    val Namespace = "io.flow.api.mocker.v0"
    val UserAgent = "apibuilder:0.13.0 https://app.apibuilder.io/flow/api-mocker/0.0.13/play_2_6_client"
    val Version = "0.0.13"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.api.mocker.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.api.mocker.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.api.mocker.v0.Client")

    logger.info(s"Initializing io.flow.api.mocker.v0.Client for url $baseUrl")





    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.api.mocker.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String

    }

  }



  package errors {

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}