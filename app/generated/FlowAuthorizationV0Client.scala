/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.6
 * apidoc:0.11.1 http://www.apidoc.me/flow/authorization/0.0.6/play_2_4_client
 */
package io.flow.authorization.v0.models {

  sealed trait Authorization

  case class AuthorizationForm(
    privilege: io.flow.authorization.v0.models.Privilege,
    userId: _root_.scala.Option[String] = None,
    roleId: _root_.scala.Option[String] = None,
    context: String
  )

  case class AuthorizationRole(
    id: String,
    privilege: io.flow.authorization.v0.models.Privilege,
    context: String,
    role: io.flow.authorization.v0.models.RoleSummary
  ) extends Authorization

  case class AuthorizationUser(
    id: String,
    privilege: io.flow.authorization.v0.models.Privilege,
    context: String,
    user: io.flow.common.v0.models.ExpandableUser
  ) extends Authorization

  case class AuthorizationVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    authorization: io.flow.authorization.v0.models.Authorization
  )

  case class Check(
    result: Boolean,
    reason: String
  )

  case class Membership(
    id: String,
    role: io.flow.authorization.v0.models.RoleSummary,
    user: io.flow.common.v0.models.ExpandableUser
  )

  case class MembershipForm(
    roleId: String,
    userId: String
  )

  case class MembershipVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    membership: io.flow.authorization.v0.models.Membership
  )

  case class Role(
    id: String,
    name: String
  )

  case class RoleForm(
    name: String
  )

  case class RoleSummary(
    id: String,
    name: String
  )

  case class RoleVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    role: io.flow.authorization.v0.models.Role
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Authorization, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class AuthorizationUndefinedType(
    description: String
  ) extends Authorization

  sealed trait Privilege

  object Privilege {

    case object All extends Privilege { override def toString = "all" }
    case object Create extends Privilege { override def toString = "create" }
    case object Read extends Privilege { override def toString = "read" }
    case object Update extends Privilege { override def toString = "update" }
    case object Delete extends Privilege { override def toString = "delete" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Privilege

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(All, Create, Read, Update, Delete)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Privilege = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Privilege] = byName.get(value.toLowerCase)

  }

}

package io.flow.authorization.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.authorization.v0.models.json._
    import io.flow.common.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsAuthorizationPrivilege = new play.api.libs.json.Reads[io.flow.authorization.v0.models.Privilege] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.authorization.v0.models.Privilege] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.authorization.v0.models.Privilege(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.authorization.v0.models.Privilege(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsObjectPrivilege(obj: io.flow.authorization.v0.models.Privilege) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesAuthorizationPrivilege: play.api.libs.json.Writes[Privilege] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.Privilege] {
        def writes(obj: io.flow.authorization.v0.models.Privilege) = {
          jsObjectPrivilege(obj)
        }
      }
    }

    implicit def jsonReadsAuthorizationAuthorizationForm: play.api.libs.json.Reads[AuthorizationForm] = {
      (
        (__ \ "privilege").read[io.flow.authorization.v0.models.Privilege] and
        (__ \ "user_id").readNullable[String] and
        (__ \ "role_id").readNullable[String] and
        (__ \ "context").read[String]
      )(AuthorizationForm.apply _)
    }

    def jsObjectAuthorizationForm(obj: io.flow.authorization.v0.models.AuthorizationForm) = {
      play.api.libs.json.Json.obj(
        "privilege" -> play.api.libs.json.JsString(obj.privilege.toString),
        "user_id" -> play.api.libs.json.Json.toJson(obj.userId),
        "role_id" -> play.api.libs.json.Json.toJson(obj.roleId),
        "context" -> play.api.libs.json.JsString(obj.context)
      )
    }

    implicit def jsonWritesAuthorizationAuthorizationForm: play.api.libs.json.Writes[AuthorizationForm] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.AuthorizationForm] {
        def writes(obj: io.flow.authorization.v0.models.AuthorizationForm) = {
          jsObjectAuthorizationForm(obj)
        }
      }
    }

    implicit def jsonReadsAuthorizationAuthorizationRole: play.api.libs.json.Reads[AuthorizationRole] = {
      (
        (__ \ "id").read[String] and
        (__ \ "privilege").read[io.flow.authorization.v0.models.Privilege] and
        (__ \ "context").read[String] and
        (__ \ "role").read[io.flow.authorization.v0.models.RoleSummary]
      )(AuthorizationRole.apply _)
    }

    def jsObjectAuthorizationRole(obj: io.flow.authorization.v0.models.AuthorizationRole) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "privilege" -> play.api.libs.json.JsString(obj.privilege.toString),
        "context" -> play.api.libs.json.JsString(obj.context),
        "role" -> jsObjectRoleSummary(obj.role)
      )
    }

    implicit def jsonReadsAuthorizationAuthorizationUser: play.api.libs.json.Reads[AuthorizationUser] = {
      (
        (__ \ "id").read[String] and
        (__ \ "privilege").read[io.flow.authorization.v0.models.Privilege] and
        (__ \ "context").read[String] and
        (__ \ "user").read[io.flow.common.v0.models.ExpandableUser]
      )(AuthorizationUser.apply _)
    }

    def jsObjectAuthorizationUser(obj: io.flow.authorization.v0.models.AuthorizationUser) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "privilege" -> play.api.libs.json.JsString(obj.privilege.toString),
        "context" -> play.api.libs.json.JsString(obj.context),
        "user" -> io.flow.common.v0.models.json.jsObjectExpandableUser(obj.user)
      )
    }

    implicit def jsonReadsAuthorizationAuthorizationVersion: play.api.libs.json.Reads[AuthorizationVersion] = {
      (
        (__ \ "id").read[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "type").read[io.flow.common.v0.models.ChangeType] and
        (__ \ "authorization").read[io.flow.authorization.v0.models.Authorization]
      )(AuthorizationVersion.apply _)
    }

    def jsObjectAuthorizationVersion(obj: io.flow.authorization.v0.models.AuthorizationVersion) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "authorization" -> jsObjectAuthorization(obj.authorization)
      )
    }

    implicit def jsonWritesAuthorizationAuthorizationVersion: play.api.libs.json.Writes[AuthorizationVersion] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.AuthorizationVersion] {
        def writes(obj: io.flow.authorization.v0.models.AuthorizationVersion) = {
          jsObjectAuthorizationVersion(obj)
        }
      }
    }

    implicit def jsonReadsAuthorizationCheck: play.api.libs.json.Reads[Check] = {
      (
        (__ \ "result").read[Boolean] and
        (__ \ "reason").read[String]
      )(Check.apply _)
    }

    def jsObjectCheck(obj: io.flow.authorization.v0.models.Check) = {
      play.api.libs.json.Json.obj(
        "result" -> play.api.libs.json.JsBoolean(obj.result),
        "reason" -> play.api.libs.json.JsString(obj.reason)
      )
    }

    implicit def jsonWritesAuthorizationCheck: play.api.libs.json.Writes[Check] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.Check] {
        def writes(obj: io.flow.authorization.v0.models.Check) = {
          jsObjectCheck(obj)
        }
      }
    }

    implicit def jsonReadsAuthorizationMembership: play.api.libs.json.Reads[Membership] = {
      (
        (__ \ "id").read[String] and
        (__ \ "role").read[io.flow.authorization.v0.models.RoleSummary] and
        (__ \ "user").read[io.flow.common.v0.models.ExpandableUser]
      )(Membership.apply _)
    }

    def jsObjectMembership(obj: io.flow.authorization.v0.models.Membership) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "role" -> jsObjectRoleSummary(obj.role),
        "user" -> io.flow.common.v0.models.json.jsObjectExpandableUser(obj.user)
      )
    }

    implicit def jsonWritesAuthorizationMembership: play.api.libs.json.Writes[Membership] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.Membership] {
        def writes(obj: io.flow.authorization.v0.models.Membership) = {
          jsObjectMembership(obj)
        }
      }
    }

    implicit def jsonReadsAuthorizationMembershipForm: play.api.libs.json.Reads[MembershipForm] = {
      (
        (__ \ "role_id").read[String] and
        (__ \ "user_id").read[String]
      )(MembershipForm.apply _)
    }

    def jsObjectMembershipForm(obj: io.flow.authorization.v0.models.MembershipForm) = {
      play.api.libs.json.Json.obj(
        "role_id" -> play.api.libs.json.JsString(obj.roleId),
        "user_id" -> play.api.libs.json.JsString(obj.userId)
      )
    }

    implicit def jsonWritesAuthorizationMembershipForm: play.api.libs.json.Writes[MembershipForm] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.MembershipForm] {
        def writes(obj: io.flow.authorization.v0.models.MembershipForm) = {
          jsObjectMembershipForm(obj)
        }
      }
    }

    implicit def jsonReadsAuthorizationMembershipVersion: play.api.libs.json.Reads[MembershipVersion] = {
      (
        (__ \ "id").read[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "type").read[io.flow.common.v0.models.ChangeType] and
        (__ \ "membership").read[io.flow.authorization.v0.models.Membership]
      )(MembershipVersion.apply _)
    }

    def jsObjectMembershipVersion(obj: io.flow.authorization.v0.models.MembershipVersion) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "membership" -> jsObjectMembership(obj.membership)
      )
    }

    implicit def jsonWritesAuthorizationMembershipVersion: play.api.libs.json.Writes[MembershipVersion] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.MembershipVersion] {
        def writes(obj: io.flow.authorization.v0.models.MembershipVersion) = {
          jsObjectMembershipVersion(obj)
        }
      }
    }

    implicit def jsonReadsAuthorizationRole: play.api.libs.json.Reads[Role] = {
      (
        (__ \ "id").read[String] and
        (__ \ "name").read[String]
      )(Role.apply _)
    }

    def jsObjectRole(obj: io.flow.authorization.v0.models.Role) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesAuthorizationRole: play.api.libs.json.Writes[Role] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.Role] {
        def writes(obj: io.flow.authorization.v0.models.Role) = {
          jsObjectRole(obj)
        }
      }
    }

    implicit def jsonReadsAuthorizationRoleForm: play.api.libs.json.Reads[RoleForm] = {
      (__ \ "name").read[String].map { x => new RoleForm(name = x) }
    }

    def jsObjectRoleForm(obj: io.flow.authorization.v0.models.RoleForm) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesAuthorizationRoleForm: play.api.libs.json.Writes[RoleForm] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.RoleForm] {
        def writes(obj: io.flow.authorization.v0.models.RoleForm) = {
          jsObjectRoleForm(obj)
        }
      }
    }

    implicit def jsonReadsAuthorizationRoleSummary: play.api.libs.json.Reads[RoleSummary] = {
      (
        (__ \ "id").read[String] and
        (__ \ "name").read[String]
      )(RoleSummary.apply _)
    }

    def jsObjectRoleSummary(obj: io.flow.authorization.v0.models.RoleSummary) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesAuthorizationRoleSummary: play.api.libs.json.Writes[RoleSummary] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.RoleSummary] {
        def writes(obj: io.flow.authorization.v0.models.RoleSummary) = {
          jsObjectRoleSummary(obj)
        }
      }
    }

    implicit def jsonReadsAuthorizationRoleVersion: play.api.libs.json.Reads[RoleVersion] = {
      (
        (__ \ "id").read[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "type").read[io.flow.common.v0.models.ChangeType] and
        (__ \ "role").read[io.flow.authorization.v0.models.Role]
      )(RoleVersion.apply _)
    }

    def jsObjectRoleVersion(obj: io.flow.authorization.v0.models.RoleVersion) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "role" -> jsObjectRole(obj.role)
      )
    }

    implicit def jsonWritesAuthorizationRoleVersion: play.api.libs.json.Writes[RoleVersion] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.RoleVersion] {
        def writes(obj: io.flow.authorization.v0.models.RoleVersion) = {
          jsObjectRoleVersion(obj)
        }
      }
    }

    implicit def jsonReadsAuthorizationAuthorization: play.api.libs.json.Reads[Authorization] = new play.api.libs.json.Reads[Authorization] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[Authorization] = {
        (js \ "discriminator").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "authorization_role" => js.validate[io.flow.authorization.v0.models.AuthorizationRole]
              case "authorization_user" => js.validate[io.flow.authorization.v0.models.AuthorizationUser]
              case other => play.api.libs.json.JsSuccess(io.flow.authorization.v0.models.AuthorizationUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectAuthorization(obj: io.flow.authorization.v0.models.Authorization) = {
      obj match {
        case x: io.flow.authorization.v0.models.AuthorizationRole => jsObjectAuthorizationRole(x) ++ play.api.libs.json.Json.obj("discriminator" -> "authorization_role")
        case x: io.flow.authorization.v0.models.AuthorizationUser => jsObjectAuthorizationUser(x) ++ play.api.libs.json.Json.obj("discriminator" -> "authorization_user")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesAuthorizationAuthorization: play.api.libs.json.Writes[Authorization] = {
      new play.api.libs.json.Writes[io.flow.authorization.v0.models.Authorization] {
        def writes(obj: io.flow.authorization.v0.models.Authorization) = {
          jsObjectAuthorization(obj)
        }
      }
    }
  }
}

package io.flow.authorization.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.authorization.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: Privilege
    private[this] val enumPrivilegeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.authorization.v0.models.Privilege.all.mkString(", ")}"

    implicit val pathBindableEnumPrivilege = new PathBindable.Parsing[io.flow.authorization.v0.models.Privilege] (
      Privilege.fromString(_).get, _.toString, enumPrivilegeNotFound
    )

    implicit val queryStringBindableEnumPrivilege = new QueryStringBindable.Parsing[io.flow.authorization.v0.models.Privilege](
      Privilege.fromString(_).get, _.toString, enumPrivilegeNotFound
    )

  }

}


package io.flow.authorization.v0 {

  object Constants {

    val UserAgent = "apidoc:0.11.1 http://www.apidoc.me/flow/authorization/0.0.6/play_2_4_client"
    val Version = "0.0.6"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[io.flow.authorization.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) {
    import io.flow.authorization.v0.models.json._
    import io.flow.common.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.authorization.v0.Client")

    logger.info(s"Initializing io.flow.authorization.v0.Client for url $apiUrl")

    def authorizations: Authorizations = Authorizations

    def checks: Checks = Checks

    def healthchecks: Healthchecks = Healthchecks

    def memberships: Memberships = Memberships

    def roles: Roles = Roles

    object Authorizations extends Authorizations {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        userId: _root_.scala.Option[String] = None,
        roleId: _root_.scala.Option[String] = None,
        impliedUserId: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-created_at"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.Authorization]] = {
        val queryParameters = Seq(
          userId.map("user_id" -> _),
          roleId.map("role_id" -> _),
          impliedUserId.map("implied_user_id" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/authorizations", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.authorization.v0.Client.parseJson("Seq[io.flow.authorization.v0.models.Authorization]", r, _.validate[Seq[io.flow.authorization.v0.models.Authorization]])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "created_at"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.AuthorizationVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/authorizations/versions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.authorization.v0.Client.parseJson("Seq[io.flow.authorization.v0.models.AuthorizationVersion]", r, _.validate[Seq[io.flow.authorization.v0.models.AuthorizationVersion]])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Authorization] = {
        _executeRequest("GET", s"/authorizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 200 => _root_.io.flow.authorization.v0.Client.parseJson("io.flow.authorization.v0.models.Authorization", r, _.validate[io.flow.authorization.v0.models.Authorization])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        authorizationForm: io.flow.authorization.v0.models.AuthorizationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Authorization] = {
        val payload = play.api.libs.json.Json.toJson(authorizationForm)

        _executeRequest("POST", s"/authorizations", body = Some(payload)).map {
          case r if r.status == 201 => _root_.io.flow.authorization.v0.Client.parseJson("io.flow.authorization.v0.models.Authorization", r, _.validate[io.flow.authorization.v0.models.Authorization])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.authorization.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/authorizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Checks extends Checks {
      override def get(
        userId: String,
        privilege: io.flow.authorization.v0.models.Privilege,
        context: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Check] = {
        val queryParameters = Seq(
          Some("user_id" -> userId),
          Some("privilege" -> privilege.toString),
          Some("context" -> context)
        ).flatten

        _executeRequest("GET", s"/checks", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.authorization.v0.Client.parseJson("io.flow.authorization.v0.models.Check", r, _.validate[io.flow.authorization.v0.models.Check])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.authorization.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }
    }

    object Healthchecks extends Healthchecks {
      override def getInternalAndHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck").map {
          case r if r.status == 200 => _root_.io.flow.authorization.v0.Client.parseJson("io.flow.common.v0.models.Healthcheck", r, _.validate[io.flow.common.v0.models.Healthcheck])
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Memberships extends Memberships {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        roleId: _root_.scala.Option[String] = None,
        userId: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-created_at",
        expand: _root_.scala.Option[Seq[String]] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.Membership]] = {
        val queryParameters = Seq(
          roleId.map("role_id" -> _),
          userId.map("user_id" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/memberships", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.authorization.v0.Client.parseJson("Seq[io.flow.authorization.v0.models.Membership]", r, _.validate[Seq[io.flow.authorization.v0.models.Membership]])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        membershipId: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "created_at"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.MembershipVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          membershipId.getOrElse(Nil).map("membership_id" -> _)

        _executeRequest("GET", s"/memberships/versions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.authorization.v0.Client.parseJson("Seq[io.flow.authorization.v0.models.MembershipVersion]", r, _.validate[Seq[io.flow.authorization.v0.models.MembershipVersion]])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Membership] = {
        _executeRequest("GET", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 200 => _root_.io.flow.authorization.v0.Client.parseJson("io.flow.authorization.v0.models.Membership", r, _.validate[io.flow.authorization.v0.models.Membership])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        membershipForm: io.flow.authorization.v0.models.MembershipForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Membership] = {
        val payload = play.api.libs.json.Json.toJson(membershipForm)

        _executeRequest("POST", s"/memberships", body = Some(payload)).map {
          case r if r.status == 201 => _root_.io.flow.authorization.v0.Client.parseJson("io.flow.authorization.v0.models.Membership", r, _.validate[io.flow.authorization.v0.models.Membership])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.authorization.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Roles extends Roles {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        name: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "lower(name)"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.Role]] = {
        val queryParameters = Seq(
          name.map("name" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/roles", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.authorization.v0.Client.parseJson("Seq[io.flow.authorization.v0.models.Role]", r, _.validate[Seq[io.flow.authorization.v0.models.Role]])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        roleId: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "created_at"
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.RoleVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          roleId.getOrElse(Nil).map("role_id" -> _)

        _executeRequest("GET", s"/roles/versions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.authorization.v0.Client.parseJson("Seq[io.flow.authorization.v0.models.RoleVersion]", r, _.validate[Seq[io.flow.authorization.v0.models.RoleVersion]])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Role] = {
        _executeRequest("GET", s"/roles/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 200 => _root_.io.flow.authorization.v0.Client.parseJson("io.flow.authorization.v0.models.Role", r, _.validate[io.flow.authorization.v0.models.Role])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        roleForm: io.flow.authorization.v0.models.RoleForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Role] = {
        val payload = play.api.libs.json.Json.toJson(roleForm)

        _executeRequest("POST", s"/roles", body = Some(payload)).map {
          case r if r.status == 201 => _root_.io.flow.authorization.v0.Client.parseJson("io.flow.authorization.v0.models.Role", r, _.validate[io.flow.authorization.v0.models.Role])
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.authorization.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/roles/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.authorization.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.flow.authorization.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Authorizations {
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      userId: _root_.scala.Option[String] = None,
      roleId: _root_.scala.Option[String] = None,
      impliedUserId: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-created_at"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.Authorization]]

    /**
     * Provides visibility into recent changes of each object, including deletion
     */
    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "created_at"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.AuthorizationVersion]]

    def getById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Authorization]

    def post(
      authorizationForm: io.flow.authorization.v0.models.AuthorizationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Authorization]

    def deleteById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Checks {
    def get(
      userId: String,
      privilege: io.flow.authorization.v0.models.Privilege,
      context: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Check]
  }

  trait Healthchecks {
    def getInternalAndHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck]
  }

  trait Memberships {
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      roleId: _root_.scala.Option[String] = None,
      userId: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-created_at",
      expand: _root_.scala.Option[Seq[String]] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.Membership]]

    /**
     * Provides visibility into recent changes of each object, including deletion
     */
    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      membershipId: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "created_at"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.MembershipVersion]]

    def getById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Membership]

    def post(
      membershipForm: io.flow.authorization.v0.models.MembershipForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Membership]

    def deleteById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Roles {
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      name: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "lower(name)"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.Role]]

    /**
     * Provides visibility into recent changes of each object, including deletion
     */
    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      roleId: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "created_at"
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.authorization.v0.models.RoleVersion]]

    def getById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Role]

    def post(
      roleForm: io.flow.authorization.v0.models.RoleForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.authorization.v0.models.Role]

    def deleteById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import io.flow.authorization.v0.models.json._
    import io.flow.common.v0.models.json._

    case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.io.flow.authorization.v0.Client.parseJson("Seq[io.flow.common.v0.models.Error]", response, _.validate[Seq[io.flow.common.v0.models.Error]])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}