/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.9
 * apidoc:0.11.11 http://www.apidoc.me/flow/common/0.0.9/play_2_4_mock_client
 */
package io.flow.common.v0.mock {

  object Factories {

    def randomString(): String = {
      "Test " + _root_.java.util.UUID.randomUUID.toString.replaceAll("-", " ")
    }

    def makeCalendar() = io.flow.common.v0.models.Calendar.Weekdays

    def makeCapability() = io.flow.common.v0.models.Capability.Crossdock

    def makeChangeType() = io.flow.common.v0.models.ChangeType.Insert

    def makeCountry() = io.flow.common.v0.models.Country.Us

    def makeCurrency() = io.flow.common.v0.models.Currency.Usa

    def makeLanguage() = io.flow.common.v0.models.Language.En

    def makeScheduleExceptionStatus() = io.flow.common.v0.models.ScheduleExceptionStatus.Open

    def makeUnitOfMeasurement() = io.flow.common.v0.models.UnitOfMeasurement.Millimeter

    def makeUnitOfTime() = io.flow.common.v0.models.UnitOfTime.Day

    def makeValueAddedService() = io.flow.common.v0.models.ValueAddedService.HazardousMaterial

    def makeVisibility() = io.flow.common.v0.models.Visibility.Public

    def makeAddress() = io.flow.common.v0.models.Address(
      text = None,
      streets = None,
      city = None,
      province = None,
      postalCode = None,
      country = None
    )

    def makeChangeHeader() = io.flow.common.v0.models.ChangeHeader(
      id = randomString(),
      timestamp = new org.joda.time.DateTime(),
      `type` = io.flow.common.v0.mock.Factories.makeChangeType()
    )

    def makeContact() = io.flow.common.v0.models.Contact(
      name = io.flow.common.v0.mock.Factories.makeName(),
      email = None,
      phone = None
    )

    def makeDatetimeRange() = io.flow.common.v0.models.DatetimeRange(
      from = new org.joda.time.DateTime(),
      to = new org.joda.time.DateTime()
    )

    def makeDimension() = io.flow.common.v0.models.Dimension(
      value = 1.0,
      units = io.flow.common.v0.mock.Factories.makeUnitOfMeasurement()
    )

    def makeError() = io.flow.common.v0.models.Error(
      code = randomString(),
      message = randomString()
    )

    def makeHealthcheck() = io.flow.common.v0.models.Healthcheck(
      status = randomString()
    )

    def makeLocale() = io.flow.common.v0.models.Locale(
      country = io.flow.common.v0.mock.Factories.makeCountry(),
      language = io.flow.common.v0.mock.Factories.makeLanguage()
    )

    def makeLocation() = io.flow.common.v0.models.Location(
      value = randomString()
    )

    def makeName() = io.flow.common.v0.models.Name(
      first = None,
      last = None
    )

    def makeOrganization() = io.flow.common.v0.models.Organization(
      id = randomString(),
      name = randomString()
    )

    def makeOrganizationReference() = io.flow.common.v0.models.OrganizationReference(
      id = randomString()
    )

    def makeOrganizationSummary() = io.flow.common.v0.models.OrganizationSummary(
      id = randomString(),
      name = randomString()
    )

    def makePrice() = io.flow.common.v0.models.Price(
      amount = randomString(),
      currency = randomString()
    )

    def makeUser() = io.flow.common.v0.models.User(
      id = randomString(),
      email = None,
      name = io.flow.common.v0.mock.Factories.makeName()
    )

    def makeUserReference() = io.flow.common.v0.models.UserReference(
      id = randomString()
    )

    def makeUserSummary() = io.flow.common.v0.models.UserSummary(
      id = randomString(),
      email = None,
      name = randomString()
    )

    def makeExpandableOrganization = io.flow.common.v0.mock.Factories.makeOrganization()

    def makeExpandableUser = io.flow.common.v0.mock.Factories.makeUser()

  }

}