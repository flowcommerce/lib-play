/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.6
 * apidoc:0.11.1 http://localhost:9000/flow/common/0.0.6/play_2_x_json
 */
package io.flow.common.v0.models {

  sealed trait ExpandableOrganization

  sealed trait ExpandableUser

  /**
   * Defines structured fields for address to be used in user/form input. Either text
   * or the structured input needs to be present.
   */
  case class Address(
    text: _root_.scala.Option[String] = None,
    streets: _root_.scala.Option[Seq[String]] = None,
    city: _root_.scala.Option[String] = None,
    province: _root_.scala.Option[String] = None,
    postalCode: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[io.flow.common.v0.models.Country] = None
  )

  case class ChangeHeader(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType
  )

  case class DatetimeRange(
    from: _root_.org.joda.time.DateTime,
    to: _root_.org.joda.time.DateTime
  )

  case class Dimension(
    value: Double,
    units: io.flow.common.v0.models.UnitOfMeasurement
  )

  case class Error(
    code: String,
    message: String
  )

  case class Healthcheck(
    status: String
  )

  /**
   * We capture the location as a string; over time we anticipate storing structued
   * data by parsing the location (e.g. the country) to enable things like reporting,
   * filtering in bulk
   */
  case class Location(
    value: String
  )

  case class Name(
    first: _root_.scala.Option[String] = None,
    last: _root_.scala.Option[String] = None
  )

  /**
   * Represents a single organization in the system
   */
  case class Organization(
    id: String,
    name: String
  ) extends ExpandableOrganization

  case class OrganizationReference(
    id: String
  ) extends ExpandableOrganization

  case class OrganizationSummary(
    id: String,
    name: String
  )

  case class Price(
    amount: String,
    currency: String
  )

  /**
   * Represents a single user in the system
   */
  case class User(
    id: String,
    email: _root_.scala.Option[String] = None,
    name: io.flow.common.v0.models.Name
  ) extends ExpandableUser

  case class UserReference(
    id: String
  ) extends ExpandableUser

  case class UserSummary(
    id: String,
    name: String
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ExpandableOrganization, it will need to be handled in the client
   * code. This implementation will deserialize these future types as an instance of
   * this class.
   */
  case class ExpandableOrganizationUndefinedType(
    description: String
  ) extends ExpandableOrganization

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ExpandableUser, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class ExpandableUserUndefinedType(
    description: String
  ) extends ExpandableUser

  sealed trait Calendar

  object Calendar {

    /**
     * Mon - Fri
     */
    case object Weekdays extends Calendar { override def toString = "Weekdays" }
    /**
     * 7 days per week
     */
    case object Everyday extends Calendar { override def toString = "Everyday" }
    /**
     * We do not yet know the calendar
     */
    case object Unknown extends Calendar { override def toString = "Unknown" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Calendar

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Weekdays, Everyday, Unknown)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Calendar = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Calendar] = byName.get(value.toLowerCase)

  }

  /**
   * TODO: Returns, inventory
   */
  sealed trait Capability

  object Capability {

    case object Crossdock extends Capability { override def toString = "crossdock" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Capability

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Crossdock)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Capability = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Capability] = byName.get(value.toLowerCase)

  }

  sealed trait ChangeType

  object ChangeType {

    case object Insert extends ChangeType { override def toString = "insert" }
    case object Update extends ChangeType { override def toString = "update" }
    case object Delete extends ChangeType { override def toString = "delete" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ChangeType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Insert, Update, Delete)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ChangeType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ChangeType] = byName.get(value.toLowerCase)

  }

  /**
   * ISO 4217 3-character country code. See http://www.xe.com/iso4217.php
   */
  sealed trait Country

  object Country {

    case object Usa extends Country { override def toString = "usa" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Country

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Usa)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Country = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Country] = byName.get(value.toLowerCase)

  }

  /**
   * Pending better name
   */
  sealed trait ScheduleExceptionStatus

  object ScheduleExceptionStatus {

    case object Open extends ScheduleExceptionStatus { override def toString = "Open" }
    case object Closed extends ScheduleExceptionStatus { override def toString = "Closed" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ScheduleExceptionStatus

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Open, Closed)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ScheduleExceptionStatus = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ScheduleExceptionStatus] = byName.get(value.toLowerCase)

  }

  /**
   * Defines the units of measurement that we support. As units are added, we conform
   * with the standard units provided by jscience as part of JSR 363 - see
   * http://jscience.org/api/javax/measure/unit/SI.html and
   * http://jscience.org/api/javax/measure/unit/NonSI.html
   */
  sealed trait UnitOfMeasurement

  object UnitOfMeasurement {

    /**
     * Equivalent to MILLI(METRE).
     */
    case object Millimeter extends UnitOfMeasurement { override def toString = "millimeter" }
    /**
     * Equivalent to CENTI(METRE).
     */
    case object Centimeter extends UnitOfMeasurement { override def toString = "centimeter" }
    /**
     * A unit of length equal to 0.01004 m (standard name in).
     */
    case object Inch extends UnitOfMeasurement { override def toString = "inch" }
    /**
     * A unit of length equal to 0.3048 m (standard name ft).
     */
    case object Foot extends UnitOfMeasurement { override def toString = "foot" }
    /**
     * A unit of volume equal to one cubic inch (in³).
     */
    case object CubicInch extends UnitOfMeasurement { override def toString = "cubic_inch" }
    /**
     * The metric unit for volume quantities (m³).
     */
    case object CubicMeter extends UnitOfMeasurement { override def toString = "cubic_meter" }
    /**
     * A unit of mass equal to 1 / 1000 kilogram (standard name g).
     */
    case object Gram extends UnitOfMeasurement { override def toString = "gram" }
    /**
     * The base unit for mass quantities (kg).
     */
    case object Kilogram extends UnitOfMeasurement { override def toString = "kilogram" }
    /**
     * The base unit for length quantities (m).
     */
    case object Meter extends UnitOfMeasurement { override def toString = "meter" }
    /**
     * A unit of mass equal to 1 / 16 POUND (standard name oz).
     */
    case object Ounce extends UnitOfMeasurement { override def toString = "ounce" }
    /**
     * A unit of mass equal to 453.59237 grams (avoirdupois pound, standard name lb).
     */
    case object Pound extends UnitOfMeasurement { override def toString = "pound" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends UnitOfMeasurement

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Millimeter, Centimeter, Inch, Foot, CubicInch, CubicMeter, Gram, Kilogram, Meter, Ounce, Pound)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UnitOfMeasurement = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UnitOfMeasurement] = byName.get(value.toLowerCase)

  }

  /**
   * Defines the units of time that we support. We confirm with the standard set of
   * units of time from
   * http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html
   */
  sealed trait UnitOfTime

  object UnitOfTime {

    case object Day extends UnitOfTime { override def toString = "day" }
    case object Hour extends UnitOfTime { override def toString = "hour" }
    case object Minute extends UnitOfTime { override def toString = "minute" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends UnitOfTime

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Day, Hour, Minute)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UnitOfTime = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UnitOfTime] = byName.get(value.toLowerCase)

  }

  sealed trait ValueAddedService

  object ValueAddedService {

    /**
     * See https://en.wikipedia.org/wiki/ORM-D
     */
    case object HazardousMaterial extends ValueAddedService { override def toString = "Hazardous Material" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ValueAddedService

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(HazardousMaterial)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ValueAddedService = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ValueAddedService] = byName.get(value.toLowerCase)

  }

  sealed trait Visibility

  object Visibility {

    case object Public extends Visibility { override def toString = "public" }
    case object Private extends Visibility { override def toString = "private" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Visibility

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Public, Private)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

  }

}

package io.flow.common.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsCommonCalendar = new play.api.libs.json.Reads[io.flow.common.v0.models.Calendar] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Calendar] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Calendar(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Calendar(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsObjectCalendar(obj: io.flow.common.v0.models.Calendar) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonCalendar: play.api.libs.json.Writes[Calendar] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Calendar] {
        def writes(obj: io.flow.common.v0.models.Calendar) = {
          jsObjectCalendar(obj)
        }
      }
    }

    implicit val jsonReadsCommonCapability = new play.api.libs.json.Reads[io.flow.common.v0.models.Capability] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Capability] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Capability(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Capability(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsObjectCapability(obj: io.flow.common.v0.models.Capability) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonCapability: play.api.libs.json.Writes[Capability] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Capability] {
        def writes(obj: io.flow.common.v0.models.Capability) = {
          jsObjectCapability(obj)
        }
      }
    }

    implicit val jsonReadsCommonChangeType = new play.api.libs.json.Reads[io.flow.common.v0.models.ChangeType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.ChangeType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ChangeType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ChangeType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsObjectChangeType(obj: io.flow.common.v0.models.ChangeType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonChangeType: play.api.libs.json.Writes[ChangeType] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ChangeType] {
        def writes(obj: io.flow.common.v0.models.ChangeType) = {
          jsObjectChangeType(obj)
        }
      }
    }

    implicit val jsonReadsCommonCountry = new play.api.libs.json.Reads[io.flow.common.v0.models.Country] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Country] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Country(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Country(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsObjectCountry(obj: io.flow.common.v0.models.Country) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonCountry: play.api.libs.json.Writes[Country] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Country] {
        def writes(obj: io.flow.common.v0.models.Country) = {
          jsObjectCountry(obj)
        }
      }
    }

    implicit val jsonReadsCommonScheduleExceptionStatus = new play.api.libs.json.Reads[io.flow.common.v0.models.ScheduleExceptionStatus] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.ScheduleExceptionStatus] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ScheduleExceptionStatus(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ScheduleExceptionStatus(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsObjectScheduleExceptionStatus(obj: io.flow.common.v0.models.ScheduleExceptionStatus) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonScheduleExceptionStatus: play.api.libs.json.Writes[ScheduleExceptionStatus] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ScheduleExceptionStatus] {
        def writes(obj: io.flow.common.v0.models.ScheduleExceptionStatus) = {
          jsObjectScheduleExceptionStatus(obj)
        }
      }
    }

    implicit val jsonReadsCommonUnitOfMeasurement = new play.api.libs.json.Reads[io.flow.common.v0.models.UnitOfMeasurement] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.UnitOfMeasurement] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfMeasurement(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfMeasurement(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsObjectUnitOfMeasurement(obj: io.flow.common.v0.models.UnitOfMeasurement) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonUnitOfMeasurement: play.api.libs.json.Writes[UnitOfMeasurement] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.UnitOfMeasurement] {
        def writes(obj: io.flow.common.v0.models.UnitOfMeasurement) = {
          jsObjectUnitOfMeasurement(obj)
        }
      }
    }

    implicit val jsonReadsCommonUnitOfTime = new play.api.libs.json.Reads[io.flow.common.v0.models.UnitOfTime] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.UnitOfTime] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfTime(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfTime(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsObjectUnitOfTime(obj: io.flow.common.v0.models.UnitOfTime) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonUnitOfTime: play.api.libs.json.Writes[UnitOfTime] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.UnitOfTime] {
        def writes(obj: io.flow.common.v0.models.UnitOfTime) = {
          jsObjectUnitOfTime(obj)
        }
      }
    }

    implicit val jsonReadsCommonValueAddedService = new play.api.libs.json.Reads[io.flow.common.v0.models.ValueAddedService] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.ValueAddedService] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ValueAddedService(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ValueAddedService(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsObjectValueAddedService(obj: io.flow.common.v0.models.ValueAddedService) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonValueAddedService: play.api.libs.json.Writes[ValueAddedService] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ValueAddedService] {
        def writes(obj: io.flow.common.v0.models.ValueAddedService) = {
          jsObjectValueAddedService(obj)
        }
      }
    }

    implicit val jsonReadsCommonVisibility = new play.api.libs.json.Reads[io.flow.common.v0.models.Visibility] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Visibility] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Visibility(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Visibility(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsObjectVisibility(obj: io.flow.common.v0.models.Visibility) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonVisibility: play.api.libs.json.Writes[Visibility] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Visibility] {
        def writes(obj: io.flow.common.v0.models.Visibility) = {
          jsObjectVisibility(obj)
        }
      }
    }

    implicit def jsonReadsCommonAddress: play.api.libs.json.Reads[Address] = {
      (
        (__ \ "text").readNullable[String] and
        (__ \ "streets").readNullable[Seq[String]] and
        (__ \ "city").readNullable[String] and
        (__ \ "province").readNullable[String] and
        (__ \ "postal_code").readNullable[String] and
        (__ \ "country").readNullable[io.flow.common.v0.models.Country]
      )(Address.apply _)
    }

    def jsObjectAddress(obj: io.flow.common.v0.models.Address) = {
      play.api.libs.json.Json.obj(
        "text" -> play.api.libs.json.Json.toJson(obj.text),
        "streets" -> play.api.libs.json.Json.toJson(obj.streets),
        "city" -> play.api.libs.json.Json.toJson(obj.city),
        "province" -> play.api.libs.json.Json.toJson(obj.province),
        "postal_code" -> play.api.libs.json.Json.toJson(obj.postalCode),
        "country" -> play.api.libs.json.Json.toJson(obj.country)
      )
    }

    implicit def jsonWritesCommonAddress: play.api.libs.json.Writes[Address] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Address] {
        def writes(obj: io.flow.common.v0.models.Address) = {
          jsObjectAddress(obj)
        }
      }
    }

    implicit def jsonReadsCommonChangeHeader: play.api.libs.json.Reads[ChangeHeader] = {
      (
        (__ \ "id").read[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "type").read[io.flow.common.v0.models.ChangeType]
      )(ChangeHeader.apply _)
    }

    def jsObjectChangeHeader(obj: io.flow.common.v0.models.ChangeHeader) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString)
      )
    }

    implicit def jsonWritesCommonChangeHeader: play.api.libs.json.Writes[ChangeHeader] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ChangeHeader] {
        def writes(obj: io.flow.common.v0.models.ChangeHeader) = {
          jsObjectChangeHeader(obj)
        }
      }
    }

    implicit def jsonReadsCommonDatetimeRange: play.api.libs.json.Reads[DatetimeRange] = {
      (
        (__ \ "from").read[_root_.org.joda.time.DateTime] and
        (__ \ "to").read[_root_.org.joda.time.DateTime]
      )(DatetimeRange.apply _)
    }

    def jsObjectDatetimeRange(obj: io.flow.common.v0.models.DatetimeRange) = {
      play.api.libs.json.Json.obj(
        "from" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.from)),
        "to" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.to))
      )
    }

    implicit def jsonWritesCommonDatetimeRange: play.api.libs.json.Writes[DatetimeRange] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.DatetimeRange] {
        def writes(obj: io.flow.common.v0.models.DatetimeRange) = {
          jsObjectDatetimeRange(obj)
        }
      }
    }

    implicit def jsonReadsCommonDimension: play.api.libs.json.Reads[Dimension] = {
      (
        (__ \ "value").read[Double] and
        (__ \ "units").read[io.flow.common.v0.models.UnitOfMeasurement]
      )(Dimension.apply _)
    }

    def jsObjectDimension(obj: io.flow.common.v0.models.Dimension) = {
      play.api.libs.json.Json.obj(
        "value" -> play.api.libs.json.JsNumber(obj.value),
        "units" -> play.api.libs.json.JsString(obj.units.toString)
      )
    }

    implicit def jsonWritesCommonDimension: play.api.libs.json.Writes[Dimension] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Dimension] {
        def writes(obj: io.flow.common.v0.models.Dimension) = {
          jsObjectDimension(obj)
        }
      }
    }

    implicit def jsonReadsCommonError: play.api.libs.json.Reads[Error] = {
      (
        (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
    }

    def jsObjectError(obj: io.flow.common.v0.models.Error) = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code),
        "message" -> play.api.libs.json.JsString(obj.message)
      )
    }

    implicit def jsonWritesCommonError: play.api.libs.json.Writes[Error] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Error] {
        def writes(obj: io.flow.common.v0.models.Error) = {
          jsObjectError(obj)
        }
      }
    }

    implicit def jsonReadsCommonHealthcheck: play.api.libs.json.Reads[Healthcheck] = {
      (__ \ "status").read[String].map { x => new Healthcheck(status = x) }
    }

    def jsObjectHealthcheck(obj: io.flow.common.v0.models.Healthcheck) = {
      play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.JsString(obj.status)
      )
    }

    implicit def jsonWritesCommonHealthcheck: play.api.libs.json.Writes[Healthcheck] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Healthcheck] {
        def writes(obj: io.flow.common.v0.models.Healthcheck) = {
          jsObjectHealthcheck(obj)
        }
      }
    }

    implicit def jsonReadsCommonLocation: play.api.libs.json.Reads[Location] = {
      (__ \ "value").read[String].map { x => new Location(value = x) }
    }

    def jsObjectLocation(obj: io.flow.common.v0.models.Location) = {
      play.api.libs.json.Json.obj(
        "value" -> play.api.libs.json.JsString(obj.value)
      )
    }

    implicit def jsonWritesCommonLocation: play.api.libs.json.Writes[Location] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Location] {
        def writes(obj: io.flow.common.v0.models.Location) = {
          jsObjectLocation(obj)
        }
      }
    }

    implicit def jsonReadsCommonName: play.api.libs.json.Reads[Name] = {
      (
        (__ \ "first").readNullable[String] and
        (__ \ "last").readNullable[String]
      )(Name.apply _)
    }

    def jsObjectName(obj: io.flow.common.v0.models.Name) = {
      play.api.libs.json.Json.obj(
        "first" -> play.api.libs.json.Json.toJson(obj.first),
        "last" -> play.api.libs.json.Json.toJson(obj.last)
      )
    }

    implicit def jsonWritesCommonName: play.api.libs.json.Writes[Name] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Name] {
        def writes(obj: io.flow.common.v0.models.Name) = {
          jsObjectName(obj)
        }
      }
    }

    implicit def jsonReadsCommonOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "id").read[String] and
        (__ \ "name").read[String]
      )(Organization.apply _)
    }

    def jsObjectOrganization(obj: io.flow.common.v0.models.Organization) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonReadsCommonOrganizationReference: play.api.libs.json.Reads[OrganizationReference] = {
      (__ \ "id").read[String].map { x => new OrganizationReference(id = x) }
    }

    def jsObjectOrganizationReference(obj: io.flow.common.v0.models.OrganizationReference) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonReadsCommonOrganizationSummary: play.api.libs.json.Reads[OrganizationSummary] = {
      (
        (__ \ "id").read[String] and
        (__ \ "name").read[String]
      )(OrganizationSummary.apply _)
    }

    def jsObjectOrganizationSummary(obj: io.flow.common.v0.models.OrganizationSummary) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesCommonOrganizationSummary: play.api.libs.json.Writes[OrganizationSummary] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.OrganizationSummary] {
        def writes(obj: io.flow.common.v0.models.OrganizationSummary) = {
          jsObjectOrganizationSummary(obj)
        }
      }
    }

    implicit def jsonReadsCommonPrice: play.api.libs.json.Reads[Price] = {
      (
        (__ \ "amount").read[String] and
        (__ \ "currency").read[String]
      )(Price.apply _)
    }

    def jsObjectPrice(obj: io.flow.common.v0.models.Price) = {
      play.api.libs.json.Json.obj(
        "amount" -> play.api.libs.json.JsString(obj.amount),
        "currency" -> play.api.libs.json.JsString(obj.currency)
      )
    }

    implicit def jsonWritesCommonPrice: play.api.libs.json.Writes[Price] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Price] {
        def writes(obj: io.flow.common.v0.models.Price) = {
          jsObjectPrice(obj)
        }
      }
    }

    implicit def jsonReadsCommonUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "id").read[String] and
        (__ \ "email").readNullable[String] and
        (__ \ "name").read[io.flow.common.v0.models.Name]
      )(User.apply _)
    }

    def jsObjectUser(obj: io.flow.common.v0.models.User) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "email" -> play.api.libs.json.Json.toJson(obj.email),
        "name" -> jsObjectName(obj.name)
      )
    }

    implicit def jsonReadsCommonUserReference: play.api.libs.json.Reads[UserReference] = {
      (__ \ "id").read[String].map { x => new UserReference(id = x) }
    }

    def jsObjectUserReference(obj: io.flow.common.v0.models.UserReference) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonReadsCommonUserSummary: play.api.libs.json.Reads[UserSummary] = {
      (
        (__ \ "id").read[String] and
        (__ \ "name").read[String]
      )(UserSummary.apply _)
    }

    def jsObjectUserSummary(obj: io.flow.common.v0.models.UserSummary) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesCommonUserSummary: play.api.libs.json.Writes[UserSummary] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.UserSummary] {
        def writes(obj: io.flow.common.v0.models.UserSummary) = {
          jsObjectUserSummary(obj)
        }
      }
    }

    implicit def jsonReadsCommonExpandableOrganization: play.api.libs.json.Reads[ExpandableOrganization] = new play.api.libs.json.Reads[ExpandableOrganization] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ExpandableOrganization] = {
        (js \ "discriminator").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "organization_reference" => js.validate[io.flow.common.v0.models.OrganizationReference]
              case "organization" => js.validate[io.flow.common.v0.models.Organization]
              case other => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ExpandableOrganizationUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectExpandableOrganization(obj: io.flow.common.v0.models.ExpandableOrganization) = {
      obj match {
        case x: io.flow.common.v0.models.OrganizationReference => jsObjectOrganizationReference(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_reference")
        case x: io.flow.common.v0.models.Organization => jsObjectOrganization(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesCommonExpandableOrganization: play.api.libs.json.Writes[ExpandableOrganization] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ExpandableOrganization] {
        def writes(obj: io.flow.common.v0.models.ExpandableOrganization) = {
          jsObjectExpandableOrganization(obj)
        }
      }
    }

    implicit def jsonReadsCommonExpandableUser: play.api.libs.json.Reads[ExpandableUser] = new play.api.libs.json.Reads[ExpandableUser] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ExpandableUser] = {
        (js \ "discriminator").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "user_reference" => js.validate[io.flow.common.v0.models.UserReference]
              case "user" => js.validate[io.flow.common.v0.models.User]
              case other => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ExpandableUserUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectExpandableUser(obj: io.flow.common.v0.models.ExpandableUser) = {
      obj match {
        case x: io.flow.common.v0.models.UserReference => jsObjectUserReference(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user_reference")
        case x: io.flow.common.v0.models.User => jsObjectUser(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesCommonExpandableUser: play.api.libs.json.Writes[ExpandableUser] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ExpandableUser] {
        def writes(obj: io.flow.common.v0.models.ExpandableUser) = {
          jsObjectExpandableUser(obj)
        }
      }
    }
  }
}

package io.flow.common.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.common.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: Calendar
    private[this] val enumCalendarNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.Calendar.all.mkString(", ")}"

    implicit val pathBindableEnumCalendar = new PathBindable.Parsing[io.flow.common.v0.models.Calendar] (
      Calendar.fromString(_).get, _.toString, enumCalendarNotFound
    )

    implicit val queryStringBindableEnumCalendar = new QueryStringBindable.Parsing[io.flow.common.v0.models.Calendar](
      Calendar.fromString(_).get, _.toString, enumCalendarNotFound
    )

    // Enum: Capability
    private[this] val enumCapabilityNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.Capability.all.mkString(", ")}"

    implicit val pathBindableEnumCapability = new PathBindable.Parsing[io.flow.common.v0.models.Capability] (
      Capability.fromString(_).get, _.toString, enumCapabilityNotFound
    )

    implicit val queryStringBindableEnumCapability = new QueryStringBindable.Parsing[io.flow.common.v0.models.Capability](
      Capability.fromString(_).get, _.toString, enumCapabilityNotFound
    )

    // Enum: ChangeType
    private[this] val enumChangeTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.ChangeType.all.mkString(", ")}"

    implicit val pathBindableEnumChangeType = new PathBindable.Parsing[io.flow.common.v0.models.ChangeType] (
      ChangeType.fromString(_).get, _.toString, enumChangeTypeNotFound
    )

    implicit val queryStringBindableEnumChangeType = new QueryStringBindable.Parsing[io.flow.common.v0.models.ChangeType](
      ChangeType.fromString(_).get, _.toString, enumChangeTypeNotFound
    )

    // Enum: Country
    private[this] val enumCountryNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.Country.all.mkString(", ")}"

    implicit val pathBindableEnumCountry = new PathBindable.Parsing[io.flow.common.v0.models.Country] (
      Country.fromString(_).get, _.toString, enumCountryNotFound
    )

    implicit val queryStringBindableEnumCountry = new QueryStringBindable.Parsing[io.flow.common.v0.models.Country](
      Country.fromString(_).get, _.toString, enumCountryNotFound
    )

    // Enum: ScheduleExceptionStatus
    private[this] val enumScheduleExceptionStatusNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.ScheduleExceptionStatus.all.mkString(", ")}"

    implicit val pathBindableEnumScheduleExceptionStatus = new PathBindable.Parsing[io.flow.common.v0.models.ScheduleExceptionStatus] (
      ScheduleExceptionStatus.fromString(_).get, _.toString, enumScheduleExceptionStatusNotFound
    )

    implicit val queryStringBindableEnumScheduleExceptionStatus = new QueryStringBindable.Parsing[io.flow.common.v0.models.ScheduleExceptionStatus](
      ScheduleExceptionStatus.fromString(_).get, _.toString, enumScheduleExceptionStatusNotFound
    )

    // Enum: UnitOfMeasurement
    private[this] val enumUnitOfMeasurementNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.UnitOfMeasurement.all.mkString(", ")}"

    implicit val pathBindableEnumUnitOfMeasurement = new PathBindable.Parsing[io.flow.common.v0.models.UnitOfMeasurement] (
      UnitOfMeasurement.fromString(_).get, _.toString, enumUnitOfMeasurementNotFound
    )

    implicit val queryStringBindableEnumUnitOfMeasurement = new QueryStringBindable.Parsing[io.flow.common.v0.models.UnitOfMeasurement](
      UnitOfMeasurement.fromString(_).get, _.toString, enumUnitOfMeasurementNotFound
    )

    // Enum: UnitOfTime
    private[this] val enumUnitOfTimeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.UnitOfTime.all.mkString(", ")}"

    implicit val pathBindableEnumUnitOfTime = new PathBindable.Parsing[io.flow.common.v0.models.UnitOfTime] (
      UnitOfTime.fromString(_).get, _.toString, enumUnitOfTimeNotFound
    )

    implicit val queryStringBindableEnumUnitOfTime = new QueryStringBindable.Parsing[io.flow.common.v0.models.UnitOfTime](
      UnitOfTime.fromString(_).get, _.toString, enumUnitOfTimeNotFound
    )

    // Enum: ValueAddedService
    private[this] val enumValueAddedServiceNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.ValueAddedService.all.mkString(", ")}"

    implicit val pathBindableEnumValueAddedService = new PathBindable.Parsing[io.flow.common.v0.models.ValueAddedService] (
      ValueAddedService.fromString(_).get, _.toString, enumValueAddedServiceNotFound
    )

    implicit val queryStringBindableEnumValueAddedService = new QueryStringBindable.Parsing[io.flow.common.v0.models.ValueAddedService](
      ValueAddedService.fromString(_).get, _.toString, enumValueAddedServiceNotFound
    )

    // Enum: Visibility
    private[this] val enumVisibilityNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.Visibility.all.mkString(", ")}"

    implicit val pathBindableEnumVisibility = new PathBindable.Parsing[io.flow.common.v0.models.Visibility] (
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

    implicit val queryStringBindableEnumVisibility = new QueryStringBindable.Parsing[io.flow.common.v0.models.Visibility](
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

  }

}
