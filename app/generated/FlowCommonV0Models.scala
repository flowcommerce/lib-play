/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 * apidoc:0.9.45 http://localhost:9000/flow/common/0.0.1-dev/play_2_x_json
 */
package io.flow.common.v0.models {

  /**
   * We capture the address as a string; over time we anticipate storing structued
   * data by parsing the address (e.g. the country) to enable things like reporting,
   * filtering in bulk
   */
  case class Address(
    address: String
  )

  case class Audit(
    createdAt: _root_.org.joda.time.DateTime,
    createdBy: io.flow.common.v0.models.Reference,
    updatedAt: _root_.org.joda.time.DateTime,
    updatedBy: io.flow.common.v0.models.Reference
  )

  case class DatetimeRange(
    from: _root_.org.joda.time.DateTime,
    to: _root_.org.joda.time.DateTime
  )

  case class Dimension(
    value: Double,
    units: io.flow.common.v0.models.UnitOfMeasurement
  )

  case class Error(
    code: String,
    message: String
  )

  case class Healthcheck(
    status: String
  )

  case class Price(
    amount: BigDecimal,
    currency: String
  )

  case class Reference(
    guid: _root_.java.util.UUID
  )

  sealed trait Calendar

  object Calendar {

    /**
     * Mon - Fri
     */
    case object Weekdays extends Calendar { override def toString = "Weekdays" }
    /**
     * 7 days per week
     */
    case object Everyday extends Calendar { override def toString = "Everyday" }
    /**
     * We do not yet know the calendar
     */
    case object Unknown extends Calendar { override def toString = "Unknown" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Calendar

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Weekdays, Everyday, Unknown)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Calendar = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Calendar] = byName.get(value.toLowerCase)

  }

  /**
   * TODO: Returns, inventory
   */
  sealed trait Capability

  object Capability {

    case object Crossdock extends Capability { override def toString = "crossdock" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Capability

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Crossdock)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Capability = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Capability] = byName.get(value.toLowerCase)

  }

  /**
   * Pending better name
   */
  sealed trait ScheduleExceptionStatus

  object ScheduleExceptionStatus {

    case object Open extends ScheduleExceptionStatus { override def toString = "Open" }
    case object Closed extends ScheduleExceptionStatus { override def toString = "Closed" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ScheduleExceptionStatus

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Open, Closed)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ScheduleExceptionStatus = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ScheduleExceptionStatus] = byName.get(value.toLowerCase)

  }

  /**
   * Defines the units of measurement that we support. As units are added, we conform
   * with the standard units provided by jscience as part of JSR 363 - see
   * http://jscience.org/api/javax/measure/unit/SI.html and
   * http://jscience.org/api/javax/measure/unit/NonSI.html
   */
  sealed trait UnitOfMeasurement

  object UnitOfMeasurement {

    /**
     * Equivalent to MILLI(METRE).
     */
    case object Millimeter extends UnitOfMeasurement { override def toString = "millimeter" }
    /**
     * Equivalent to CENTI(METRE).
     */
    case object Centimeter extends UnitOfMeasurement { override def toString = "centimeter" }
    /**
     * A unit of length equal to 0.0254 m (standard name in).
     */
    case object Inch extends UnitOfMeasurement { override def toString = "inch" }
    /**
     * A unit of length equal to 0.3048 m (standard name ft).
     */
    case object Foot extends UnitOfMeasurement { override def toString = "foot" }
    /**
     * A unit of volume equal to one cubic inch (in³).
     */
    case object CubicInch extends UnitOfMeasurement { override def toString = "cubic_inch" }
    /**
     * The metric unit for volume quantities (m³).
     */
    case object CubicMeter extends UnitOfMeasurement { override def toString = "cubic_meter" }
    /**
     * A unit of mass equal to 1 / 1000 kilogram (standard name g).
     */
    case object Gram extends UnitOfMeasurement { override def toString = "gram" }
    /**
     * The base unit for mass quantities (kg).
     */
    case object Kilogram extends UnitOfMeasurement { override def toString = "kilogram" }
    /**
     * The base unit for length quantities (m).
     */
    case object Meter extends UnitOfMeasurement { override def toString = "meter" }
    /**
     * A unit of mass equal to 1 / 16 POUND (standard name oz).
     */
    case object Ounce extends UnitOfMeasurement { override def toString = "ounce" }
    /**
     * A unit of mass equal to 453.59237 grams (avoirdupois pound, standard name lb).
     */
    case object Pound extends UnitOfMeasurement { override def toString = "pound" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends UnitOfMeasurement

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Millimeter, Centimeter, Inch, Foot, CubicInch, CubicMeter, Gram, Kilogram, Meter, Ounce, Pound)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UnitOfMeasurement = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UnitOfMeasurement] = byName.get(value.toLowerCase)

  }

  sealed trait ValueAddedService

  object ValueAddedService {

    /**
     * See https://en.wikipedia.org/wiki/ORM-D
     */
    case object HazardousMaterial extends ValueAddedService { override def toString = "Hazardous Material" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ValueAddedService

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(HazardousMaterial)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ValueAddedService = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ValueAddedService] = byName.get(value.toLowerCase)

  }

}

package io.flow.common.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsCommonCalendar = __.read[String].map(Calendar.apply)
    implicit val jsonWritesCommonCalendar = new Writes[Calendar] {
      def writes(x: Calendar) = JsString(x.toString)
    }

    implicit val jsonReadsCommonCapability = __.read[String].map(Capability.apply)
    implicit val jsonWritesCommonCapability = new Writes[Capability] {
      def writes(x: Capability) = JsString(x.toString)
    }

    implicit val jsonReadsCommonScheduleExceptionStatus = __.read[String].map(ScheduleExceptionStatus.apply)
    implicit val jsonWritesCommonScheduleExceptionStatus = new Writes[ScheduleExceptionStatus] {
      def writes(x: ScheduleExceptionStatus) = JsString(x.toString)
    }

    implicit val jsonReadsCommonUnitOfMeasurement = __.read[String].map(UnitOfMeasurement.apply)
    implicit val jsonWritesCommonUnitOfMeasurement = new Writes[UnitOfMeasurement] {
      def writes(x: UnitOfMeasurement) = JsString(x.toString)
    }

    implicit val jsonReadsCommonValueAddedService = __.read[String].map(ValueAddedService.apply)
    implicit val jsonWritesCommonValueAddedService = new Writes[ValueAddedService] {
      def writes(x: ValueAddedService) = JsString(x.toString)
    }

    implicit def jsonReadsCommonAddress: play.api.libs.json.Reads[Address] = {
      (__ \ "address").read[String].map { x => new Address(address = x) }
    }

    implicit def jsonWritesCommonAddress: play.api.libs.json.Writes[Address] = new play.api.libs.json.Writes[Address] {
      def writes(x: Address) = play.api.libs.json.Json.obj(
        "address" -> play.api.libs.json.Json.toJson(x.address)
      )
    }

    implicit def jsonReadsCommonAudit: play.api.libs.json.Reads[Audit] = {
      (
        (__ \ "created_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "created_by").read[io.flow.common.v0.models.Reference] and
        (__ \ "updated_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "updated_by").read[io.flow.common.v0.models.Reference]
      )(Audit.apply _)
    }

    implicit def jsonWritesCommonAudit: play.api.libs.json.Writes[Audit] = {
      (
        (__ \ "created_at").write[_root_.org.joda.time.DateTime] and
        (__ \ "created_by").write[io.flow.common.v0.models.Reference] and
        (__ \ "updated_at").write[_root_.org.joda.time.DateTime] and
        (__ \ "updated_by").write[io.flow.common.v0.models.Reference]
      )(unlift(Audit.unapply _))
    }

    implicit def jsonReadsCommonDatetimeRange: play.api.libs.json.Reads[DatetimeRange] = {
      (
        (__ \ "from").read[_root_.org.joda.time.DateTime] and
        (__ \ "to").read[_root_.org.joda.time.DateTime]
      )(DatetimeRange.apply _)
    }

    implicit def jsonWritesCommonDatetimeRange: play.api.libs.json.Writes[DatetimeRange] = {
      (
        (__ \ "from").write[_root_.org.joda.time.DateTime] and
        (__ \ "to").write[_root_.org.joda.time.DateTime]
      )(unlift(DatetimeRange.unapply _))
    }

    implicit def jsonReadsCommonDimension: play.api.libs.json.Reads[Dimension] = {
      (
        (__ \ "value").read[Double] and
        (__ \ "units").read[io.flow.common.v0.models.UnitOfMeasurement]
      )(Dimension.apply _)
    }

    implicit def jsonWritesCommonDimension: play.api.libs.json.Writes[Dimension] = {
      (
        (__ \ "value").write[Double] and
        (__ \ "units").write[io.flow.common.v0.models.UnitOfMeasurement]
      )(unlift(Dimension.unapply _))
    }

    implicit def jsonReadsCommonError: play.api.libs.json.Reads[Error] = {
      (
        (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
    }

    implicit def jsonWritesCommonError: play.api.libs.json.Writes[Error] = {
      (
        (__ \ "code").write[String] and
        (__ \ "message").write[String]
      )(unlift(Error.unapply _))
    }

    implicit def jsonReadsCommonHealthcheck: play.api.libs.json.Reads[Healthcheck] = {
      (__ \ "status").read[String].map { x => new Healthcheck(status = x) }
    }

    implicit def jsonWritesCommonHealthcheck: play.api.libs.json.Writes[Healthcheck] = new play.api.libs.json.Writes[Healthcheck] {
      def writes(x: Healthcheck) = play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.Json.toJson(x.status)
      )
    }

    implicit def jsonReadsCommonPrice: play.api.libs.json.Reads[Price] = {
      (
        (__ \ "amount").read[BigDecimal] and
        (__ \ "currency").read[String]
      )(Price.apply _)
    }

    implicit def jsonWritesCommonPrice: play.api.libs.json.Writes[Price] = {
      (
        (__ \ "amount").write[BigDecimal] and
        (__ \ "currency").write[String]
      )(unlift(Price.unapply _))
    }

    implicit def jsonReadsCommonReference: play.api.libs.json.Reads[Reference] = {
      (__ \ "guid").read[_root_.java.util.UUID].map { x => new Reference(guid = x) }
    }

    implicit def jsonWritesCommonReference: play.api.libs.json.Writes[Reference] = new play.api.libs.json.Writes[Reference] {
      def writes(x: Reference) = play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.Json.toJson(x.guid)
      )
    }
  }
}

package io.flow.common.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.common.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: Calendar
    private[this] val enumCalendarNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.Calendar.all.mkString(", ")}"

    implicit val pathBindableEnumCalendar = new PathBindable.Parsing[io.flow.common.v0.models.Calendar] (
      Calendar.fromString(_).get, _.toString, enumCalendarNotFound
    )

    implicit val queryStringBindableEnumCalendar = new QueryStringBindable.Parsing[io.flow.common.v0.models.Calendar](
      Calendar.fromString(_).get, _.toString, enumCalendarNotFound
    )

    // Enum: Capability
    private[this] val enumCapabilityNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.Capability.all.mkString(", ")}"

    implicit val pathBindableEnumCapability = new PathBindable.Parsing[io.flow.common.v0.models.Capability] (
      Capability.fromString(_).get, _.toString, enumCapabilityNotFound
    )

    implicit val queryStringBindableEnumCapability = new QueryStringBindable.Parsing[io.flow.common.v0.models.Capability](
      Capability.fromString(_).get, _.toString, enumCapabilityNotFound
    )

    // Enum: ScheduleExceptionStatus
    private[this] val enumScheduleExceptionStatusNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.ScheduleExceptionStatus.all.mkString(", ")}"

    implicit val pathBindableEnumScheduleExceptionStatus = new PathBindable.Parsing[io.flow.common.v0.models.ScheduleExceptionStatus] (
      ScheduleExceptionStatus.fromString(_).get, _.toString, enumScheduleExceptionStatusNotFound
    )

    implicit val queryStringBindableEnumScheduleExceptionStatus = new QueryStringBindable.Parsing[io.flow.common.v0.models.ScheduleExceptionStatus](
      ScheduleExceptionStatus.fromString(_).get, _.toString, enumScheduleExceptionStatusNotFound
    )

    // Enum: UnitOfMeasurement
    private[this] val enumUnitOfMeasurementNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.UnitOfMeasurement.all.mkString(", ")}"

    implicit val pathBindableEnumUnitOfMeasurement = new PathBindable.Parsing[io.flow.common.v0.models.UnitOfMeasurement] (
      UnitOfMeasurement.fromString(_).get, _.toString, enumUnitOfMeasurementNotFound
    )

    implicit val queryStringBindableEnumUnitOfMeasurement = new QueryStringBindable.Parsing[io.flow.common.v0.models.UnitOfMeasurement](
      UnitOfMeasurement.fromString(_).get, _.toString, enumUnitOfMeasurementNotFound
    )

    // Enum: ValueAddedService
    private[this] val enumValueAddedServiceNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.common.v0.models.ValueAddedService.all.mkString(", ")}"

    implicit val pathBindableEnumValueAddedService = new PathBindable.Parsing[io.flow.common.v0.models.ValueAddedService] (
      ValueAddedService.fromString(_).get, _.toString, enumValueAddedServiceNotFound
    )

    implicit val queryStringBindableEnumValueAddedService = new QueryStringBindable.Parsing[io.flow.common.v0.models.ValueAddedService](
      ValueAddedService.fromString(_).get, _.toString, enumValueAddedServiceNotFound
    )

  }

}
