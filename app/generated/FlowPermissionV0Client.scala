/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.6.73
 * apibuilder 0.14.59 app.apibuilder.io/flow/permission/0.6.73/play_2_6_client
 */
package io.flow.permission.v0.models {

  /**
   * All roles available to attach to a user.
   */
  sealed trait FlowRole extends _root_.scala.Product with _root_.scala.Serializable

  final case class BehaviorAudit(
    behavior: io.flow.permission.v0.models.FlowBehavior,
    authenticationTechniques: Seq[io.flow.permission.v0.models.AuthenticationTechnique],
    roles: Seq[io.flow.permission.v0.models.FlowRole]
  )

  /**
   * Returns all known permissions, along with their authorization technique and all
   * of the roles which contain them.
   */
  final case class PermissionAudit(
    routes: Seq[io.flow.permission.v0.models.RouteAudit],
    behaviors: Seq[io.flow.permission.v0.models.BehaviorAudit]
  )

  /**
   * Used to test an integration's permissions, including identifying the
   * authentication technique that will be used for similar requests.
   * 
   * @param authenticationTechnique The authentication technique currently being used.
   * @param routes All the routes this request would be able to access.
   */
  final case class PermissionCheck(
    authenticationTechnique: io.flow.permission.v0.models.AuthenticationTechnique,
    user: _root_.scala.Option[io.flow.common.v0.models.ExpandableUser] = None,
    roles: Seq[io.flow.permission.v0.models.FlowRole],
    behaviors: Seq[io.flow.permission.v0.models.FlowBehavior],
    routes: Seq[io.flow.permission.v0.models.PermittedRoute]
  )

  /**
   * Returned if no permissions are available for a request.
   * 
   * @param messages A summary of the error.
   * @param grantingRoles A collection of roles the user does not have that would grant the permission.
   *        Not returned if user is not a member of this org.
   * @param adminUsers A brief list of users who could grant one of the missing roles. Not returned if
   *        user is not a member of this org
   */
  final case class PermissionError(
    code: io.flow.error.v0.models.GenericErrorCode,
    messages: Seq[String],
    grantingRoles: _root_.scala.Option[Seq[io.flow.permission.v0.models.FlowRole]] = None,
    adminUsers: _root_.scala.Option[Seq[io.flow.common.v0.models.User]] = None
  )

  /**
   * A Flow API route and method.
   * 
   * @param path An API Builder path, starting with / and excluding query strings.
   */
  final case class PermittedRoute(
    method: io.flow.permission.v0.models.PermittedHttpMethod,
    path: String
  )

  /**
   * @param path An API Builder path, starting with / and excluding query strings.
   */
  final case class RouteAudit(
    method: io.flow.permission.v0.models.PermittedHttpMethod,
    path: String,
    authenticationTechniques: Seq[io.flow.permission.v0.models.AuthenticationTechnique],
    roles: Seq[io.flow.permission.v0.models.FlowRole]
  )

  /**
   * A simple model, used to convey permitted behaviors along with approval of a
   * request for a specific permitted route.
   */
  final case class SimplePermissionCheck(
    behaviors: Seq[io.flow.permission.v0.models.FlowBehavior]
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union FlowRole, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class FlowRoleUndefinedType(
    description: String
  ) extends FlowRole

  /**
   * Various techniques a client request will use to authenticate with Flow.
   */
  sealed trait AuthenticationTechnique extends _root_.scala.Product with _root_.scala.Serializable

  object AuthenticationTechnique {

    /**
     * No authentication necessary.
     */
    case object Anonymous extends AuthenticationTechnique { override def toString = "anonymous" }
    /**
     * A browser has been assigned an identifier by flow to track their use of our
     * service for an organization.
     */
    case object Session extends AuthenticationTechnique { override def toString = "session" }
    /**
     * A token. Tokens carry the same permissions as the user who originally created
     * them.
     */
    case object Token extends AuthenticationTechnique { override def toString = "token" }
    /**
     * A partner token. Partner Tokens can only access anonymous endpoints and the
     * endpoints of the partner api.
     */
    case object PartnerToken extends AuthenticationTechnique { override def toString = "partner_token" }
    /**
     * A user logs into Flow.
     */
    case object User extends AuthenticationTechnique { override def toString = "user" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends AuthenticationTechnique

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[AuthenticationTechnique] = scala.List(Anonymous, Session, Token, PartnerToken, User)

    private[this]
    val byName: Map[String, AuthenticationTechnique] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): AuthenticationTechnique = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[AuthenticationTechnique] = byName.get(value.toLowerCase)

  }

  /**
   * Default addon roles supported by Flow. These roles don't provide enough access
   * to be useful on their own but convey additional responsibility to user roles.
   */
  sealed trait FlowAddonRole extends FlowRole

  object FlowAddonRole {

    /**
     * Can view consumer's private data
     */
    case object ConsumerDataViewer extends FlowAddonRole { override def toString = "consumer_data_viewer" }
    /**
     * Can invite new users to the org.
     */
    case object MembershipManager extends FlowAddonRole { override def toString = "membership_manager" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends FlowAddonRole

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[FlowAddonRole] = scala.List(ConsumerDataViewer, MembershipManager)

    private[this]
    val byName: Map[String, FlowAddonRole] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): FlowAddonRole = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[FlowAddonRole] = byName.get(value.toLowerCase)

  }

  /**
   * Behaviors represent cross-cutting concerns that may be assigned via roles and
   * may apply to many API endpoints.
   */
  sealed trait FlowBehavior extends _root_.scala.Product with _root_.scala.Serializable

  object FlowBehavior {

    /**
     * Allows user to view consumers' personal data.
     */
    case object ViewConsumerData extends FlowBehavior { override def toString = "view_consumer_data" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends FlowBehavior

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[FlowBehavior] = scala.List(ViewConsumerData)

    private[this]
    val byName: Map[String, FlowBehavior] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): FlowBehavior = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[FlowBehavior] = byName.get(value.toLowerCase)

  }

  /**
   * Default user roles supported by Flow
   */
  sealed trait FlowUserRole extends FlowRole

  object FlowUserRole {

    /**
     * Can fully administrate a merchant organization.
     */
    case object OrganizationAdmin extends FlowUserRole { override def toString = "organization_admin" }
    /**
     * Can access merchant functions such as analytics, billing, experiences.
     */
    case object OrganizationMerchant extends FlowUserRole { override def toString = "organization_merchant" }
    /**
     * Can access customer service functions and retreive relevant data.
     */
    case object OrganizationOperations extends FlowUserRole { override def toString = "organization_operations" }
    /**
     * Can access fulfillment functions and retreive relevant data.
     */
    case object OrganizationFulfillment extends FlowUserRole { override def toString = "organization_fulfillment" }
    /**
     * Can access marketing functions and retreive relevant data.
     */
    case object OrganizationMarketing extends FlowUserRole { override def toString = "organization_marketing" }
    /**
     * Can access billing and reconcilliation functions and retreive relevant data.
     */
    case object OrganizationFinance extends FlowUserRole { override def toString = "organization_finance" }
    /**
     * Can access Flow internal functions.
     */
    case object FlowOperations extends FlowUserRole { override def toString = "flow_operations" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends FlowUserRole

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[FlowUserRole] = scala.List(OrganizationAdmin, OrganizationMerchant, OrganizationOperations, OrganizationFulfillment, OrganizationMarketing, OrganizationFinance, FlowOperations)

    private[this]
    val byName: Map[String, FlowUserRole] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): FlowUserRole = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[FlowUserRole] = byName.get(value.toLowerCase)

  }

  /**
   * List of HTTP methods for which user permissions may be applied (OPTION for
   * example is always permitted where CORS is enabled).
   */
  sealed trait PermittedHttpMethod extends _root_.scala.Product with _root_.scala.Serializable

  object PermittedHttpMethod {

    case object Get extends PermittedHttpMethod { override def toString = "GET" }
    case object Post extends PermittedHttpMethod { override def toString = "POST" }
    case object Put extends PermittedHttpMethod { override def toString = "PUT" }
    case object Delete extends PermittedHttpMethod { override def toString = "DELETE" }
    case object Patch extends PermittedHttpMethod { override def toString = "PATCH" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends PermittedHttpMethod

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[PermittedHttpMethod] = scala.List(Get, Post, Put, Delete, Patch)

    private[this]
    val byName: Map[String, PermittedHttpMethod] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): PermittedHttpMethod = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[PermittedHttpMethod] = byName.get(value.toLowerCase)

  }

}

package io.flow.permission.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.permission.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateParser
      dateParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[org.joda.time.LocalDate] {
      def writes(x: org.joda.time.LocalDate) = {
        import org.joda.time.format.ISODateTimeFormat.date
        val str = date.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsPermissionAuthenticationTechnique = new play.api.libs.json.Reads[io.flow.permission.v0.models.AuthenticationTechnique] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.permission.v0.models.AuthenticationTechnique] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.permission.v0.models.AuthenticationTechnique(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.permission.v0.models.AuthenticationTechnique(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesPermissionAuthenticationTechnique(obj: io.flow.permission.v0.models.AuthenticationTechnique) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectAuthenticationTechnique(obj: io.flow.permission.v0.models.AuthenticationTechnique) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesPermissionAuthenticationTechnique: play.api.libs.json.Writes[AuthenticationTechnique] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.AuthenticationTechnique] {
        def writes(obj: io.flow.permission.v0.models.AuthenticationTechnique) = {
          jsonWritesPermissionAuthenticationTechnique(obj)
        }
      }
    }

    implicit val jsonReadsPermissionFlowAddonRole = new play.api.libs.json.Reads[io.flow.permission.v0.models.FlowAddonRole] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.permission.v0.models.FlowAddonRole] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.permission.v0.models.FlowAddonRole(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.permission.v0.models.FlowAddonRole(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesPermissionFlowAddonRole(obj: io.flow.permission.v0.models.FlowAddonRole) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectFlowAddonRole(obj: io.flow.permission.v0.models.FlowAddonRole) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesPermissionFlowAddonRole: play.api.libs.json.Writes[FlowAddonRole] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.FlowAddonRole] {
        def writes(obj: io.flow.permission.v0.models.FlowAddonRole) = {
          jsonWritesPermissionFlowAddonRole(obj)
        }
      }
    }

    implicit val jsonReadsPermissionFlowBehavior = new play.api.libs.json.Reads[io.flow.permission.v0.models.FlowBehavior] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.permission.v0.models.FlowBehavior] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.permission.v0.models.FlowBehavior(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.permission.v0.models.FlowBehavior(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesPermissionFlowBehavior(obj: io.flow.permission.v0.models.FlowBehavior) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectFlowBehavior(obj: io.flow.permission.v0.models.FlowBehavior) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesPermissionFlowBehavior: play.api.libs.json.Writes[FlowBehavior] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.FlowBehavior] {
        def writes(obj: io.flow.permission.v0.models.FlowBehavior) = {
          jsonWritesPermissionFlowBehavior(obj)
        }
      }
    }

    implicit val jsonReadsPermissionFlowUserRole = new play.api.libs.json.Reads[io.flow.permission.v0.models.FlowUserRole] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.permission.v0.models.FlowUserRole] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.permission.v0.models.FlowUserRole(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.permission.v0.models.FlowUserRole(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesPermissionFlowUserRole(obj: io.flow.permission.v0.models.FlowUserRole) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectFlowUserRole(obj: io.flow.permission.v0.models.FlowUserRole) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesPermissionFlowUserRole: play.api.libs.json.Writes[FlowUserRole] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.FlowUserRole] {
        def writes(obj: io.flow.permission.v0.models.FlowUserRole) = {
          jsonWritesPermissionFlowUserRole(obj)
        }
      }
    }

    implicit val jsonReadsPermissionPermittedHttpMethod = new play.api.libs.json.Reads[io.flow.permission.v0.models.PermittedHttpMethod] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.permission.v0.models.PermittedHttpMethod] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.permission.v0.models.PermittedHttpMethod(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.permission.v0.models.PermittedHttpMethod(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesPermissionPermittedHttpMethod(obj: io.flow.permission.v0.models.PermittedHttpMethod) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPermittedHttpMethod(obj: io.flow.permission.v0.models.PermittedHttpMethod) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesPermissionPermittedHttpMethod: play.api.libs.json.Writes[PermittedHttpMethod] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.PermittedHttpMethod] {
        def writes(obj: io.flow.permission.v0.models.PermittedHttpMethod) = {
          jsonWritesPermissionPermittedHttpMethod(obj)
        }
      }
    }

    implicit def jsonReadsPermissionBehaviorAudit: play.api.libs.json.Reads[BehaviorAudit] = {
      for {
        behavior <- (__ \ "behavior").read[io.flow.permission.v0.models.FlowBehavior]
        authenticationTechniques <- (__ \ "authentication_techniques").read[Seq[io.flow.permission.v0.models.AuthenticationTechnique]]
        roles <- (__ \ "roles").read[Seq[io.flow.permission.v0.models.FlowRole]]
      } yield BehaviorAudit(behavior, authenticationTechniques, roles)
    }

    def jsObjectBehaviorAudit(obj: io.flow.permission.v0.models.BehaviorAudit): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "behavior" -> play.api.libs.json.JsString(obj.behavior.toString),
        "authentication_techniques" -> play.api.libs.json.Json.toJson(obj.authenticationTechniques),
        "roles" -> play.api.libs.json.Json.toJson(obj.roles)
      )
    }

    implicit def jsonWritesPermissionBehaviorAudit: play.api.libs.json.Writes[BehaviorAudit] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.BehaviorAudit] {
        def writes(obj: io.flow.permission.v0.models.BehaviorAudit) = {
          jsObjectBehaviorAudit(obj)
        }
      }
    }

    implicit def jsonReadsPermissionPermissionAudit: play.api.libs.json.Reads[PermissionAudit] = {
      for {
        routes <- (__ \ "routes").read[Seq[io.flow.permission.v0.models.RouteAudit]]
        behaviors <- (__ \ "behaviors").read[Seq[io.flow.permission.v0.models.BehaviorAudit]]
      } yield PermissionAudit(routes, behaviors)
    }

    def jsObjectPermissionAudit(obj: io.flow.permission.v0.models.PermissionAudit): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "routes" -> play.api.libs.json.Json.toJson(obj.routes),
        "behaviors" -> play.api.libs.json.Json.toJson(obj.behaviors)
      )
    }

    implicit def jsonWritesPermissionPermissionAudit: play.api.libs.json.Writes[PermissionAudit] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.PermissionAudit] {
        def writes(obj: io.flow.permission.v0.models.PermissionAudit) = {
          jsObjectPermissionAudit(obj)
        }
      }
    }

    implicit def jsonReadsPermissionPermissionCheck: play.api.libs.json.Reads[PermissionCheck] = {
      for {
        authenticationTechnique <- (__ \ "authentication_technique").read[io.flow.permission.v0.models.AuthenticationTechnique]
        user <- (__ \ "user").readNullable[io.flow.common.v0.models.ExpandableUser]
        roles <- (__ \ "roles").read[Seq[io.flow.permission.v0.models.FlowRole]]
        behaviors <- (__ \ "behaviors").read[Seq[io.flow.permission.v0.models.FlowBehavior]]
        routes <- (__ \ "routes").read[Seq[io.flow.permission.v0.models.PermittedRoute]]
      } yield PermissionCheck(authenticationTechnique, user, roles, behaviors, routes)
    }

    def jsObjectPermissionCheck(obj: io.flow.permission.v0.models.PermissionCheck): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "authentication_technique" -> play.api.libs.json.JsString(obj.authenticationTechnique.toString),
        "roles" -> play.api.libs.json.Json.toJson(obj.roles),
        "behaviors" -> play.api.libs.json.Json.toJson(obj.behaviors),
        "routes" -> play.api.libs.json.Json.toJson(obj.routes)
      ) ++ (obj.user match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("user" -> io.flow.common.v0.models.json.jsObjectExpandableUser(x))
      })
    }

    implicit def jsonWritesPermissionPermissionCheck: play.api.libs.json.Writes[PermissionCheck] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.PermissionCheck] {
        def writes(obj: io.flow.permission.v0.models.PermissionCheck) = {
          jsObjectPermissionCheck(obj)
        }
      }
    }

    implicit def jsonReadsPermissionPermissionError: play.api.libs.json.Reads[PermissionError] = {
      for {
        code <- (__ \ "code").read[io.flow.error.v0.models.GenericErrorCode]
        messages <- (__ \ "messages").read[Seq[String]]
        grantingRoles <- (__ \ "granting_roles").readNullable[Seq[io.flow.permission.v0.models.FlowRole]]
        adminUsers <- (__ \ "admin_users").readNullable[Seq[io.flow.common.v0.models.User]]
      } yield PermissionError(code, messages, grantingRoles, adminUsers)
    }

    def jsObjectPermissionError(obj: io.flow.permission.v0.models.PermissionError): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code.toString),
        "messages" -> play.api.libs.json.Json.toJson(obj.messages)
      ) ++ (obj.grantingRoles match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("granting_roles" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.adminUsers match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("admin_users" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesPermissionPermissionError: play.api.libs.json.Writes[PermissionError] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.PermissionError] {
        def writes(obj: io.flow.permission.v0.models.PermissionError) = {
          jsObjectPermissionError(obj)
        }
      }
    }

    implicit def jsonReadsPermissionPermittedRoute: play.api.libs.json.Reads[PermittedRoute] = {
      for {
        method <- (__ \ "method").read[io.flow.permission.v0.models.PermittedHttpMethod]
        path <- (__ \ "path").read[String]
      } yield PermittedRoute(method, path)
    }

    def jsObjectPermittedRoute(obj: io.flow.permission.v0.models.PermittedRoute): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "method" -> play.api.libs.json.JsString(obj.method.toString),
        "path" -> play.api.libs.json.JsString(obj.path)
      )
    }

    implicit def jsonWritesPermissionPermittedRoute: play.api.libs.json.Writes[PermittedRoute] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.PermittedRoute] {
        def writes(obj: io.flow.permission.v0.models.PermittedRoute) = {
          jsObjectPermittedRoute(obj)
        }
      }
    }

    implicit def jsonReadsPermissionRouteAudit: play.api.libs.json.Reads[RouteAudit] = {
      for {
        method <- (__ \ "method").read[io.flow.permission.v0.models.PermittedHttpMethod]
        path <- (__ \ "path").read[String]
        authenticationTechniques <- (__ \ "authentication_techniques").read[Seq[io.flow.permission.v0.models.AuthenticationTechnique]]
        roles <- (__ \ "roles").read[Seq[io.flow.permission.v0.models.FlowRole]]
      } yield RouteAudit(method, path, authenticationTechniques, roles)
    }

    def jsObjectRouteAudit(obj: io.flow.permission.v0.models.RouteAudit): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "method" -> play.api.libs.json.JsString(obj.method.toString),
        "path" -> play.api.libs.json.JsString(obj.path),
        "authentication_techniques" -> play.api.libs.json.Json.toJson(obj.authenticationTechniques),
        "roles" -> play.api.libs.json.Json.toJson(obj.roles)
      )
    }

    implicit def jsonWritesPermissionRouteAudit: play.api.libs.json.Writes[RouteAudit] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.RouteAudit] {
        def writes(obj: io.flow.permission.v0.models.RouteAudit) = {
          jsObjectRouteAudit(obj)
        }
      }
    }

    implicit def jsonReadsPermissionSimplePermissionCheck: play.api.libs.json.Reads[SimplePermissionCheck] = {
      (__ \ "behaviors").read[Seq[io.flow.permission.v0.models.FlowBehavior]].map { x => new SimplePermissionCheck(behaviors = x) }
    }

    def jsObjectSimplePermissionCheck(obj: io.flow.permission.v0.models.SimplePermissionCheck): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "behaviors" -> play.api.libs.json.Json.toJson(obj.behaviors)
      )
    }

    implicit def jsonWritesPermissionSimplePermissionCheck: play.api.libs.json.Writes[SimplePermissionCheck] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.SimplePermissionCheck] {
        def writes(obj: io.flow.permission.v0.models.SimplePermissionCheck) = {
          jsObjectSimplePermissionCheck(obj)
        }
      }
    }

    implicit def jsonReadsPermissionFlowRole: play.api.libs.json.Reads[FlowRole] = {
      (
        (__ \ "flow_user_role").read(jsonReadsPermissionFlowUserRole).asInstanceOf[play.api.libs.json.Reads[FlowRole]]
        orElse
        (__ \ "flow_addon_role").read(jsonReadsPermissionFlowAddonRole).asInstanceOf[play.api.libs.json.Reads[FlowRole]]
        orElse
        play.api.libs.json.Reads(jsValue => play.api.libs.json.JsSuccess(io.flow.permission.v0.models.FlowRoleUndefinedType(jsValue.toString))).asInstanceOf[play.api.libs.json.Reads[FlowRole]]
      )
    }

    def jsObjectFlowRole(obj: io.flow.permission.v0.models.FlowRole): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.permission.v0.models.FlowUserRole => play.api.libs.json.Json.obj("flow_user_role" -> play.api.libs.json.JsString(x.toString))
        case x: io.flow.permission.v0.models.FlowAddonRole => play.api.libs.json.Json.obj("flow_addon_role" -> play.api.libs.json.JsString(x.toString))
        case x: io.flow.permission.v0.models.FlowRoleUndefinedType => sys.error(s"The type[io.flow.permission.v0.models.FlowRoleUndefinedType] should never be serialized")
      }
    }

    implicit def jsonWritesPermissionFlowRole: play.api.libs.json.Writes[FlowRole] = {
      new play.api.libs.json.Writes[io.flow.permission.v0.models.FlowRole] {
        def writes(obj: io.flow.permission.v0.models.FlowRole) = {
          jsObjectFlowRole(obj)
        }
      }
    }
  }
}

package io.flow.permission.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.flow.permission.v0.models._

      val authenticationTechniqueConverter: ApibuilderTypeConverter[io.flow.permission.v0.models.AuthenticationTechnique] = new ApibuilderTypeConverter[io.flow.permission.v0.models.AuthenticationTechnique] {
        override def convert(value: String): io.flow.permission.v0.models.AuthenticationTechnique = io.flow.permission.v0.models.AuthenticationTechnique(value)
        override def convert(value: io.flow.permission.v0.models.AuthenticationTechnique): String = value.toString
        override def example: io.flow.permission.v0.models.AuthenticationTechnique = io.flow.permission.v0.models.AuthenticationTechnique.Anonymous
        override def validValues: Seq[io.flow.permission.v0.models.AuthenticationTechnique] = io.flow.permission.v0.models.AuthenticationTechnique.all
      }
      implicit def pathBindableAuthenticationTechnique(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.permission.v0.models.AuthenticationTechnique] = ApibuilderPathBindable(authenticationTechniqueConverter)
      implicit def queryStringBindableAuthenticationTechnique(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.permission.v0.models.AuthenticationTechnique] = ApibuilderQueryStringBindable(authenticationTechniqueConverter)

      val flowAddonRoleConverter: ApibuilderTypeConverter[io.flow.permission.v0.models.FlowAddonRole] = new ApibuilderTypeConverter[io.flow.permission.v0.models.FlowAddonRole] {
        override def convert(value: String): io.flow.permission.v0.models.FlowAddonRole = io.flow.permission.v0.models.FlowAddonRole(value)
        override def convert(value: io.flow.permission.v0.models.FlowAddonRole): String = value.toString
        override def example: io.flow.permission.v0.models.FlowAddonRole = io.flow.permission.v0.models.FlowAddonRole.ConsumerDataViewer
        override def validValues: Seq[io.flow.permission.v0.models.FlowAddonRole] = io.flow.permission.v0.models.FlowAddonRole.all
      }
      implicit def pathBindableFlowAddonRole(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.permission.v0.models.FlowAddonRole] = ApibuilderPathBindable(flowAddonRoleConverter)
      implicit def queryStringBindableFlowAddonRole(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.permission.v0.models.FlowAddonRole] = ApibuilderQueryStringBindable(flowAddonRoleConverter)

      val flowBehaviorConverter: ApibuilderTypeConverter[io.flow.permission.v0.models.FlowBehavior] = new ApibuilderTypeConverter[io.flow.permission.v0.models.FlowBehavior] {
        override def convert(value: String): io.flow.permission.v0.models.FlowBehavior = io.flow.permission.v0.models.FlowBehavior(value)
        override def convert(value: io.flow.permission.v0.models.FlowBehavior): String = value.toString
        override def example: io.flow.permission.v0.models.FlowBehavior = io.flow.permission.v0.models.FlowBehavior.ViewConsumerData
        override def validValues: Seq[io.flow.permission.v0.models.FlowBehavior] = io.flow.permission.v0.models.FlowBehavior.all
      }
      implicit def pathBindableFlowBehavior(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.permission.v0.models.FlowBehavior] = ApibuilderPathBindable(flowBehaviorConverter)
      implicit def queryStringBindableFlowBehavior(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.permission.v0.models.FlowBehavior] = ApibuilderQueryStringBindable(flowBehaviorConverter)

      val flowUserRoleConverter: ApibuilderTypeConverter[io.flow.permission.v0.models.FlowUserRole] = new ApibuilderTypeConverter[io.flow.permission.v0.models.FlowUserRole] {
        override def convert(value: String): io.flow.permission.v0.models.FlowUserRole = io.flow.permission.v0.models.FlowUserRole(value)
        override def convert(value: io.flow.permission.v0.models.FlowUserRole): String = value.toString
        override def example: io.flow.permission.v0.models.FlowUserRole = io.flow.permission.v0.models.FlowUserRole.OrganizationAdmin
        override def validValues: Seq[io.flow.permission.v0.models.FlowUserRole] = io.flow.permission.v0.models.FlowUserRole.all
      }
      implicit def pathBindableFlowUserRole(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.permission.v0.models.FlowUserRole] = ApibuilderPathBindable(flowUserRoleConverter)
      implicit def queryStringBindableFlowUserRole(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.permission.v0.models.FlowUserRole] = ApibuilderQueryStringBindable(flowUserRoleConverter)

      val permittedHttpMethodConverter: ApibuilderTypeConverter[io.flow.permission.v0.models.PermittedHttpMethod] = new ApibuilderTypeConverter[io.flow.permission.v0.models.PermittedHttpMethod] {
        override def convert(value: String): io.flow.permission.v0.models.PermittedHttpMethod = io.flow.permission.v0.models.PermittedHttpMethod(value)
        override def convert(value: io.flow.permission.v0.models.PermittedHttpMethod): String = value.toString
        override def example: io.flow.permission.v0.models.PermittedHttpMethod = io.flow.permission.v0.models.PermittedHttpMethod.Get
        override def validValues: Seq[io.flow.permission.v0.models.PermittedHttpMethod] = io.flow.permission.v0.models.PermittedHttpMethod.all
      }
      implicit def pathBindablePermittedHttpMethod(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.permission.v0.models.PermittedHttpMethod] = ApibuilderPathBindable(permittedHttpMethodConverter)
      implicit def queryStringBindablePermittedHttpMethod(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.permission.v0.models.PermittedHttpMethod] = ApibuilderQueryStringBindable(permittedHttpMethodConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      import org.joda.time.{format, DateTime, LocalDate}

      val dateTimeIso8601: ApibuilderTypeConverter[DateTime] = new ApibuilderTypeConverter[DateTime] {
        override def convert(value: String): DateTime = format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: DateTime): String = format.ISODateTimeFormat.dateTime.print(value)
        override def example: DateTime = DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[LocalDate] = new ApibuilderTypeConverter[LocalDate] {
        override def convert(value: String): LocalDate = format.ISODateTimeFormat.yearMonthDay.parseLocalDate(value)
        override def convert(value: LocalDate): String = value.toString
        override def example: LocalDate = LocalDate.now
      }

    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.permission.v0 {

  object Constants {

    val Namespace = "io.flow.permission.v0"
    val UserAgent = "apibuilder 0.14.59 app.apibuilder.io/flow/permission/0.6.73/play_2_6_client"
    val Version = "0.6.73"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.permission.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.permission.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.permission.v0.Client")

    logger.info(s"Initializing io.flow.permission.v0.Client for url $baseUrl")

    def flowRoles: FlowRoles = FlowRoles

    def permissionChecks: PermissionChecks = PermissionChecks

    object FlowRoles extends FlowRoles {
      override def getOrganizationAndRolesByOrganization(
        organization: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.permission.v0.models.FlowRole]] = {
        _executeRequest("GET", s"/permission/organization/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/roles", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.permission.v0.Client.parseJson("Seq[io.flow.permission.v0.models.FlowRole]", r, _.validate[Seq[io.flow.permission.v0.models.FlowRole]])
          case r if r.status == 401 => throw io.flow.permission.v0.errors.UnitResponse(r.status)
          case r if r.status == 403 => throw io.flow.permission.v0.errors.PermissionErrorResponse(r)
          case r if r.status == 404 => throw io.flow.permission.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.permission.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 403, 404")
        }
      }
    }

    object PermissionChecks extends PermissionChecks {
      override def getPermissionAndChecksAndAllByOrganization(
        organization: String,
        permittedMethod: _root_.scala.Option[io.flow.permission.v0.models.PermittedHttpMethod] = None,
        path: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.permission.v0.models.PermissionCheck] = {
        val queryParameters = Seq(
          permittedMethod.map("permitted_method" -> _.toString),
          path.map("path" -> _)
        ).flatten

        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/permission/checks/all", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.permission.v0.Client.parseJson("io.flow.permission.v0.models.PermissionCheck", r, _.validate[io.flow.permission.v0.models.PermissionCheck])
          case r if r.status == 401 => throw io.flow.permission.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.permission.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.permission.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.permission.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def flowRoles: io.flow.permission.v0.FlowRoles
      def permissionChecks: io.flow.permission.v0.PermissionChecks
    }

  }

  trait FlowRoles {
    /**
     * List roles in use by this organization.
     */
    def getOrganizationAndRolesByOrganization(
      organization: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.permission.v0.models.FlowRole]]
  }

  trait PermissionChecks {
    /**
     * Returns permissions for the specified organization for the current request. Used
     * by integrators to test headers.
     * 
     * @param permittedMethod If provided, only routes matching this method will be returned.
     * @param path If provided, only routes matching theis regular expression will be retunerd.
     */
    def getPermissionAndChecksAndAllByOrganization(
      organization: String,
      permittedMethod: _root_.scala.Option[io.flow.permission.v0.models.PermittedHttpMethod] = None,
      path: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.permission.v0.models.PermissionCheck]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.permission.v0.models.json._

    final case class PermissionErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val permissionError = _root_.io.flow.permission.v0.Client.parseJson("io.flow.permission.v0.models.PermissionError", response, _.validate[io.flow.permission.v0.models.PermissionError])
    }

    final case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}