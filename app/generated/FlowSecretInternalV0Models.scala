/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.4.29
 * apibuilder 0.14.3 app.apibuilder.io/flow/secret-internal/0.4.29/play_2_x_json
 */
package io.flow.secret.internal.v0.models {

  final case class RedactedSecret(
    id: String,
    key: String = "[redacted]",
    createdAt: _root_.org.joda.time.DateTime
  )

  /**
   * @param secrets The list of all active secrets. When decoding data, you should consider the
   *        value valid if it is successfully decoded using any of these secrets.
   * @param preferredSecretId This is the ID of the secret that should be used when encoding values. This ID
   *        is guaranteed to appear in the list of secrets. In general you should expect the
   *        most recent secret to be the one with which we prefer to encode.
   */
  final case class RedactedSecretConfig(
    secrets: Seq[io.flow.secret.internal.v0.models.RedactedSecret],
    preferredSecretId: String
  )

  /**
   * @param key The actual secret key, eg the actual salt to use when hashing with JWT
   */
  final case class Secret(
    id: String,
    key: String,
    createdAt: _root_.org.joda.time.DateTime
  )

  /**
   * @param secrets The list of all active secrets. When decoding data, you should consider the
   *        value valid if it is successfully decoded using any of these secrets.
   * @param preferredSecretId This is the ID of the secret that should be used when encoding values. This ID
   *        is guaranteed to appear in the list of secrets. In general you should expect the
   *        most recent secret to be the one with which we prefer to encode.
   */
  final case class SecretConfig(
    secrets: Seq[io.flow.secret.internal.v0.models.Secret],
    preferredSecretId: String
  )

}

package io.flow.secret.internal.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.error.v0.models.json._
    import io.flow.secret.internal.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateParser
      dateParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[org.joda.time.LocalDate] {
      def writes(x: org.joda.time.LocalDate) = {
        import org.joda.time.format.ISODateTimeFormat.date
        val str = date.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsSecretInternalRedactedSecret: play.api.libs.json.Reads[RedactedSecret] = {
      for {
        id <- (__ \ "id").read[String]
        key <- (__ \ "key").read[String]
        createdAt <- (__ \ "created_at").read[_root_.org.joda.time.DateTime]
      } yield RedactedSecret(id, key, createdAt)
    }

    def jsObjectRedactedSecret(obj: io.flow.secret.internal.v0.models.RedactedSecret): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "key" -> play.api.libs.json.JsString(obj.key),
        "created_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt))
      )
    }

    implicit def jsonWritesSecretInternalRedactedSecret: play.api.libs.json.Writes[RedactedSecret] = {
      new play.api.libs.json.Writes[io.flow.secret.internal.v0.models.RedactedSecret] {
        def writes(obj: io.flow.secret.internal.v0.models.RedactedSecret) = {
          jsObjectRedactedSecret(obj)
        }
      }
    }

    implicit def jsonReadsSecretInternalRedactedSecretConfig: play.api.libs.json.Reads[RedactedSecretConfig] = {
      for {
        secrets <- (__ \ "secrets").read[Seq[io.flow.secret.internal.v0.models.RedactedSecret]]
        preferredSecretId <- (__ \ "preferred_secret_id").read[String]
      } yield RedactedSecretConfig(secrets, preferredSecretId)
    }

    def jsObjectRedactedSecretConfig(obj: io.flow.secret.internal.v0.models.RedactedSecretConfig): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "secrets" -> play.api.libs.json.Json.toJson(obj.secrets),
        "preferred_secret_id" -> play.api.libs.json.JsString(obj.preferredSecretId)
      )
    }

    implicit def jsonWritesSecretInternalRedactedSecretConfig: play.api.libs.json.Writes[RedactedSecretConfig] = {
      new play.api.libs.json.Writes[io.flow.secret.internal.v0.models.RedactedSecretConfig] {
        def writes(obj: io.flow.secret.internal.v0.models.RedactedSecretConfig) = {
          jsObjectRedactedSecretConfig(obj)
        }
      }
    }

    implicit def jsonReadsSecretInternalSecret: play.api.libs.json.Reads[Secret] = {
      for {
        id <- (__ \ "id").read[String]
        key <- (__ \ "key").read[String]
        createdAt <- (__ \ "created_at").read[_root_.org.joda.time.DateTime]
      } yield Secret(id, key, createdAt)
    }

    def jsObjectSecret(obj: io.flow.secret.internal.v0.models.Secret): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "key" -> play.api.libs.json.JsString(obj.key),
        "created_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt))
      )
    }

    implicit def jsonWritesSecretInternalSecret: play.api.libs.json.Writes[Secret] = {
      new play.api.libs.json.Writes[io.flow.secret.internal.v0.models.Secret] {
        def writes(obj: io.flow.secret.internal.v0.models.Secret) = {
          jsObjectSecret(obj)
        }
      }
    }

    implicit def jsonReadsSecretInternalSecretConfig: play.api.libs.json.Reads[SecretConfig] = {
      for {
        secrets <- (__ \ "secrets").read[Seq[io.flow.secret.internal.v0.models.Secret]]
        preferredSecretId <- (__ \ "preferred_secret_id").read[String]
      } yield SecretConfig(secrets, preferredSecretId)
    }

    def jsObjectSecretConfig(obj: io.flow.secret.internal.v0.models.SecretConfig): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "secrets" -> play.api.libs.json.Json.toJson(obj.secrets),
        "preferred_secret_id" -> play.api.libs.json.JsString(obj.preferredSecretId)
      )
    }

    implicit def jsonWritesSecretInternalSecretConfig: play.api.libs.json.Writes[SecretConfig] = {
      new play.api.libs.json.Writes[io.flow.secret.internal.v0.models.SecretConfig] {
        def writes(obj: io.flow.secret.internal.v0.models.SecretConfig) = {
          jsObjectSecretConfig(obj)
        }
      }
    }
  }
}

package io.flow.secret.internal.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      import org.joda.time.{format, DateTime, LocalDate}

      val dateTimeIso8601: ApibuilderTypeConverter[DateTime] = new ApibuilderTypeConverter[DateTime] {
        override def convert(value: String): DateTime = format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: DateTime): String = format.ISODateTimeFormat.dateTime.print(value)
        override def example: DateTime = DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[LocalDate] = new ApibuilderTypeConverter[LocalDate] {
        override def convert(value: String): LocalDate = format.ISODateTimeFormat.yearMonthDay.parseLocalDate(value)
        override def convert(value: LocalDate): String = value.toString
        override def example: LocalDate = LocalDate.now
      }

    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}
