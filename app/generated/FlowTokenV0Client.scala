/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.3.69
 * apibuilder:0.12.61 https://app.apibuilder.io/flow/token/0.3.69/play_2_6_client
 */
package io.flow.token.v0.models {

  sealed trait Token extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type Token
   */
  sealed trait TokenDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object TokenDiscriminator {

    case object OrganizationToken extends TokenDiscriminator { override def toString = "organization_token" }
    case object PartnerToken extends TokenDiscriminator { override def toString = "partner_token" }

    case class UNDEFINED(override val toString: String) extends TokenDiscriminator

    val all: scala.List[TokenDiscriminator] = scala.List(OrganizationToken, PartnerToken)

    private[this] val byName: Map[String, TokenDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): TokenDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[TokenDiscriminator] = byName.get(value.toLowerCase)

  }

  sealed trait TokenReference extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type TokenReference
   */
  sealed trait TokenReferenceDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object TokenReferenceDiscriminator {

    case object OrganizationTokenReference extends TokenReferenceDiscriminator { override def toString = "organization_token_reference" }
    case object PartnerTokenReference extends TokenReferenceDiscriminator { override def toString = "partner_token_reference" }

    case class UNDEFINED(override val toString: String) extends TokenReferenceDiscriminator

    val all: scala.List[TokenReferenceDiscriminator] = scala.List(OrganizationTokenReference, PartnerTokenReference)

    private[this] val byName: Map[String, TokenReferenceDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): TokenReferenceDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[TokenReferenceDiscriminator] = byName.get(value.toLowerCase)

  }

  /**
   * The actual value of the API token. This is modeled as a separate resource as it
   * is fetched only on demand.
   * 
   * @param value The actual cleartext value of the token
   */
  case class Cleartext(
    value: String
  )

  /**
   * All of the metadata associated with a given token.
   * 
   * @param partial The partial API token
   * @param createdAt The date/time on which this token was created
   */
  case class OrganizationToken(
    id: String,
    organization: io.flow.common.v0.models.OrganizationReference,
    user: io.flow.common.v0.models.UserReference,
    environment: io.flow.common.v0.models.Environment,
    partial: String,
    createdAt: _root_.org.joda.time.DateTime,
    description: _root_.scala.Option[String] = None
  ) extends Token

  /**
   * Used to create a new token. User making the request must be authorized to create
   * a token for this organization.
   */
  case class OrganizationTokenForm(
    environment: io.flow.common.v0.models.Environment,
    description: _root_.scala.Option[String] = None
  )

  /**
   * Summary data for a given token
   */
  case class OrganizationTokenReference(
    id: String,
    organization: io.flow.common.v0.models.OrganizationReference,
    environment: io.flow.common.v0.models.Environment,
    user: io.flow.common.v0.models.UserReference
  ) extends TokenReference

  /**
   * All of the metadata associated with a given token.
   * 
   * @param partial The partial API token
   * @param createdAt The date/time on which this token was created
   */
  case class PartnerToken(
    id: String,
    partner: io.flow.token.v0.models.TokenPartnerReference,
    user: io.flow.common.v0.models.UserReference,
    environment: io.flow.common.v0.models.Environment,
    partial: String,
    createdAt: _root_.org.joda.time.DateTime,
    description: _root_.scala.Option[String] = None
  ) extends Token

  /**
   * Used to create a new token. User making the request must be authorized to create
   * a token for this partner.
   */
  case class PartnerTokenForm(
    environment: io.flow.common.v0.models.Environment,
    description: _root_.scala.Option[String] = None
  )

  /**
   * Summary data for a given token
   * 
   * @param partner The Id of the partner for which this token was created
   */
  case class PartnerTokenReference(
    id: String,
    partner: io.flow.token.v0.models.TokenPartnerReference,
    environment: io.flow.common.v0.models.Environment,
    user: io.flow.common.v0.models.UserReference
  ) extends TokenReference

  /**
   * Used to authenticate a given token.
   * 
   * @param token The actual token with which to authenticate
   */
  case class TokenAuthenticationForm(
    token: String
  )

  case class TokenPartnerReference(
    id: String
  )

  /**
   * Model used to report whether or not a given token is valid
   * 
   * @param status Textual description of whether or not token is valid
   */
  case class TokenValidation(
    status: String
  )

  /**
   * Defines the payload of a request to validate a token, with primary goal of
   * preventing the token from being included in an HTTP GET.
   * 
   * @param token The actual token that you are validating
   */
  case class TokenValidationForm(
    token: String
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Token, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  case class TokenUndefinedType(
    description: String
  ) extends Token

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union TokenReference, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  case class TokenReferenceUndefinedType(
    description: String
  ) extends TokenReference

}

package io.flow.token.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.token.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsTokenCleartext: play.api.libs.json.Reads[Cleartext] = {
      (__ \ "value").read[String].map { x => new Cleartext(value = x) }
    }

    def jsObjectCleartext(obj: io.flow.token.v0.models.Cleartext): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "value" -> play.api.libs.json.JsString(obj.value)
      )
    }

    implicit def jsonWritesTokenCleartext: play.api.libs.json.Writes[Cleartext] = {
      new play.api.libs.json.Writes[io.flow.token.v0.models.Cleartext] {
        def writes(obj: io.flow.token.v0.models.Cleartext) = {
          jsObjectCleartext(obj)
        }
      }
    }

    implicit def jsonReadsTokenOrganizationToken: play.api.libs.json.Reads[OrganizationToken] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[io.flow.common.v0.models.OrganizationReference] and
        (__ \ "user").read[io.flow.common.v0.models.UserReference] and
        (__ \ "environment").read[io.flow.common.v0.models.Environment] and
        (__ \ "partial").read[String] and
        (__ \ "created_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "description").readNullable[String]
      )(OrganizationToken.apply _)
    }

    def jsObjectOrganizationToken(obj: io.flow.token.v0.models.OrganizationToken): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> io.flow.common.v0.models.json.jsObjectOrganizationReference(obj.organization),
        "user" -> io.flow.common.v0.models.json.jsObjectUserReference(obj.user),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString),
        "partial" -> play.api.libs.json.JsString(obj.partial),
        "created_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt))
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsTokenOrganizationTokenForm: play.api.libs.json.Reads[OrganizationTokenForm] = {
      (
        (__ \ "environment").read[io.flow.common.v0.models.Environment] and
        (__ \ "description").readNullable[String]
      )(OrganizationTokenForm.apply _)
    }

    def jsObjectOrganizationTokenForm(obj: io.flow.token.v0.models.OrganizationTokenForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesTokenOrganizationTokenForm: play.api.libs.json.Writes[OrganizationTokenForm] = {
      new play.api.libs.json.Writes[io.flow.token.v0.models.OrganizationTokenForm] {
        def writes(obj: io.flow.token.v0.models.OrganizationTokenForm) = {
          jsObjectOrganizationTokenForm(obj)
        }
      }
    }

    implicit def jsonReadsTokenOrganizationTokenReference: play.api.libs.json.Reads[OrganizationTokenReference] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[io.flow.common.v0.models.OrganizationReference] and
        (__ \ "environment").read[io.flow.common.v0.models.Environment] and
        (__ \ "user").read[io.flow.common.v0.models.UserReference]
      )(OrganizationTokenReference.apply _)
    }

    def jsObjectOrganizationTokenReference(obj: io.flow.token.v0.models.OrganizationTokenReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> io.flow.common.v0.models.json.jsObjectOrganizationReference(obj.organization),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString),
        "user" -> io.flow.common.v0.models.json.jsObjectUserReference(obj.user)
      )
    }

    implicit def jsonReadsTokenPartnerToken: play.api.libs.json.Reads[PartnerToken] = {
      (
        (__ \ "id").read[String] and
        (__ \ "partner").read[io.flow.token.v0.models.TokenPartnerReference] and
        (__ \ "user").read[io.flow.common.v0.models.UserReference] and
        (__ \ "environment").read[io.flow.common.v0.models.Environment] and
        (__ \ "partial").read[String] and
        (__ \ "created_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "description").readNullable[String]
      )(PartnerToken.apply _)
    }

    def jsObjectPartnerToken(obj: io.flow.token.v0.models.PartnerToken): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "partner" -> jsObjectTokenPartnerReference(obj.partner),
        "user" -> io.flow.common.v0.models.json.jsObjectUserReference(obj.user),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString),
        "partial" -> play.api.libs.json.JsString(obj.partial),
        "created_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt))
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsTokenPartnerTokenForm: play.api.libs.json.Reads[PartnerTokenForm] = {
      (
        (__ \ "environment").read[io.flow.common.v0.models.Environment] and
        (__ \ "description").readNullable[String]
      )(PartnerTokenForm.apply _)
    }

    def jsObjectPartnerTokenForm(obj: io.flow.token.v0.models.PartnerTokenForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesTokenPartnerTokenForm: play.api.libs.json.Writes[PartnerTokenForm] = {
      new play.api.libs.json.Writes[io.flow.token.v0.models.PartnerTokenForm] {
        def writes(obj: io.flow.token.v0.models.PartnerTokenForm) = {
          jsObjectPartnerTokenForm(obj)
        }
      }
    }

    implicit def jsonReadsTokenPartnerTokenReference: play.api.libs.json.Reads[PartnerTokenReference] = {
      (
        (__ \ "id").read[String] and
        (__ \ "partner").read[io.flow.token.v0.models.TokenPartnerReference] and
        (__ \ "environment").read[io.flow.common.v0.models.Environment] and
        (__ \ "user").read[io.flow.common.v0.models.UserReference]
      )(PartnerTokenReference.apply _)
    }

    def jsObjectPartnerTokenReference(obj: io.flow.token.v0.models.PartnerTokenReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "partner" -> jsObjectTokenPartnerReference(obj.partner),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString),
        "user" -> io.flow.common.v0.models.json.jsObjectUserReference(obj.user)
      )
    }

    implicit def jsonReadsTokenTokenAuthenticationForm: play.api.libs.json.Reads[TokenAuthenticationForm] = {
      (__ \ "token").read[String].map { x => new TokenAuthenticationForm(token = x) }
    }

    def jsObjectTokenAuthenticationForm(obj: io.flow.token.v0.models.TokenAuthenticationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token)
      )
    }

    implicit def jsonWritesTokenTokenAuthenticationForm: play.api.libs.json.Writes[TokenAuthenticationForm] = {
      new play.api.libs.json.Writes[io.flow.token.v0.models.TokenAuthenticationForm] {
        def writes(obj: io.flow.token.v0.models.TokenAuthenticationForm) = {
          jsObjectTokenAuthenticationForm(obj)
        }
      }
    }

    implicit def jsonReadsTokenTokenPartnerReference: play.api.libs.json.Reads[TokenPartnerReference] = {
      (__ \ "id").read[String].map { x => new TokenPartnerReference(id = x) }
    }

    def jsObjectTokenPartnerReference(obj: io.flow.token.v0.models.TokenPartnerReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesTokenTokenPartnerReference: play.api.libs.json.Writes[TokenPartnerReference] = {
      new play.api.libs.json.Writes[io.flow.token.v0.models.TokenPartnerReference] {
        def writes(obj: io.flow.token.v0.models.TokenPartnerReference) = {
          jsObjectTokenPartnerReference(obj)
        }
      }
    }

    implicit def jsonReadsTokenTokenValidation: play.api.libs.json.Reads[TokenValidation] = {
      (__ \ "status").read[String].map { x => new TokenValidation(status = x) }
    }

    def jsObjectTokenValidation(obj: io.flow.token.v0.models.TokenValidation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.JsString(obj.status)
      )
    }

    implicit def jsonWritesTokenTokenValidation: play.api.libs.json.Writes[TokenValidation] = {
      new play.api.libs.json.Writes[io.flow.token.v0.models.TokenValidation] {
        def writes(obj: io.flow.token.v0.models.TokenValidation) = {
          jsObjectTokenValidation(obj)
        }
      }
    }

    implicit def jsonReadsTokenTokenValidationForm: play.api.libs.json.Reads[TokenValidationForm] = {
      (__ \ "token").read[String].map { x => new TokenValidationForm(token = x) }
    }

    def jsObjectTokenValidationForm(obj: io.flow.token.v0.models.TokenValidationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token)
      )
    }

    implicit def jsonWritesTokenTokenValidationForm: play.api.libs.json.Writes[TokenValidationForm] = {
      new play.api.libs.json.Writes[io.flow.token.v0.models.TokenValidationForm] {
        def writes(obj: io.flow.token.v0.models.TokenValidationForm) = {
          jsObjectTokenValidationForm(obj)
        }
      }
    }

    implicit def jsonReadsTokenToken: play.api.libs.json.Reads[Token] = new play.api.libs.json.Reads[Token] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[Token] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[Token] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "organization_token" => js.validate[io.flow.token.v0.models.OrganizationToken]
          case "partner_token" => js.validate[io.flow.token.v0.models.PartnerToken]
          case other => play.api.libs.json.JsSuccess(io.flow.token.v0.models.TokenUndefinedType(other))
        }
      }
    }

    def jsObjectToken(obj: io.flow.token.v0.models.Token): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.token.v0.models.OrganizationToken => jsObjectOrganizationToken(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_token")
        case x: io.flow.token.v0.models.PartnerToken => jsObjectPartnerToken(x) ++ play.api.libs.json.Json.obj("discriminator" -> "partner_token")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesTokenToken: play.api.libs.json.Writes[Token] = {
      new play.api.libs.json.Writes[io.flow.token.v0.models.Token] {
        def writes(obj: io.flow.token.v0.models.Token) = {
          jsObjectToken(obj)
        }
      }
    }

    implicit def jsonReadsTokenTokenReference: play.api.libs.json.Reads[TokenReference] = new play.api.libs.json.Reads[TokenReference] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[TokenReference] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[TokenReference] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "organization_token_reference" => js.validate[io.flow.token.v0.models.OrganizationTokenReference]
          case "partner_token_reference" => js.validate[io.flow.token.v0.models.PartnerTokenReference]
          case other => play.api.libs.json.JsSuccess(io.flow.token.v0.models.TokenReferenceUndefinedType(other))
        }
      }
    }

    def jsObjectTokenReference(obj: io.flow.token.v0.models.TokenReference): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.token.v0.models.OrganizationTokenReference => jsObjectOrganizationTokenReference(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_token_reference")
        case x: io.flow.token.v0.models.PartnerTokenReference => jsObjectPartnerTokenReference(x) ++ play.api.libs.json.Json.obj("discriminator" -> "partner_token_reference")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesTokenTokenReference: play.api.libs.json.Writes[TokenReference] = {
      new play.api.libs.json.Writes[io.flow.token.v0.models.TokenReference] {
        def writes(obj: io.flow.token.v0.models.TokenReference) = {
          jsObjectTokenReference(obj)
        }
      }
    }
  }
}

package io.flow.token.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.token.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}


package io.flow.token.v0 {

  object Constants {

    val BaseUrl = "https://token.api.flow.io"
    val Namespace = "io.flow.token.v0"
    val UserAgent = "apibuilder:0.12.61 https://app.apibuilder.io/flow/token/0.3.69/play_2_6_client"
    val Version = "0.3.69"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String = "https://token.api.flow.io",
    auth: scala.Option[io.flow.token.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.token.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.token.v0.Client")

    logger.info(s"Initializing io.flow.token.v0.Client for url $baseUrl")

    def organizationTokens: OrganizationTokens = OrganizationTokens

    def partnerTokens: PartnerTokens = PartnerTokens

    def tokens: Tokens = Tokens

    def tokenValidations: TokenValidations = TokenValidations

    object OrganizationTokens extends OrganizationTokens {
      override def get(
        organization: String,
        id: _root_.scala.Option[Seq[String]] = None,
        mine: _root_.scala.Option[Boolean] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.token.v0.models.OrganizationToken]] = {
        val queryParameters = Seq(
          mine.map("mine" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/tokens", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.token.v0.Client.parseJson("Seq[io.flow.token.v0.models.OrganizationToken]", r, _.validate[Seq[io.flow.token.v0.models.OrganizationToken]])
          case r if r.status == 401 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.token.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def post(
        organization: String,
        organizationTokenForm: io.flow.token.v0.models.OrganizationTokenForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.OrganizationToken] = {
        val payload = play.api.libs.json.Json.toJson(organizationTokenForm)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/tokens", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.token.v0.Client.parseJson("io.flow.token.v0.models.OrganizationToken", r, _.validate[io.flow.token.v0.models.OrganizationToken])
          case r if r.status == 401 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.token.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.token.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }
    }

    object PartnerTokens extends PartnerTokens {
      override def get(
        partner: String,
        id: _root_.scala.Option[Seq[String]] = None,
        mine: _root_.scala.Option[Boolean] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.token.v0.models.PartnerToken]] = {
        val queryParameters = Seq(
          mine.map("mine" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/partners/${play.utils.UriEncoding.encodePathSegment(partner, "UTF-8")}/tokens", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.token.v0.Client.parseJson("Seq[io.flow.token.v0.models.PartnerToken]", r, _.validate[Seq[io.flow.token.v0.models.PartnerToken]])
          case r if r.status == 401 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.token.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def post(
        partner: String,
        partnerTokenForm: io.flow.token.v0.models.PartnerTokenForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.PartnerToken] = {
        val payload = play.api.libs.json.Json.toJson(partnerTokenForm)

        _executeRequest("POST", s"/partners/${play.utils.UriEncoding.encodePathSegment(partner, "UTF-8")}/tokens", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.token.v0.Client.parseJson("io.flow.token.v0.models.PartnerToken", r, _.validate[io.flow.token.v0.models.PartnerToken])
          case r if r.status == 401 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.token.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.token.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }
    }

    object Tokens extends Tokens {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[String] = None,
        partner: _root_.scala.Option[String] = None,
        mine: _root_.scala.Option[Boolean] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.token.v0.models.Token]] = {
        val queryParameters = Seq(
          organization.map("organization" -> _),
          partner.map("partner" -> _),
          mine.map("mine" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/tokens", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.token.v0.Client.parseJson("Seq[io.flow.token.v0.models.Token]", r, _.validate[Seq[io.flow.token.v0.models.Token]])
          case r if r.status == 401 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.token.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.Token] = {
        _executeRequest("GET", s"/tokens/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.token.v0.Client.parseJson("io.flow.token.v0.models.Token", r, _.validate[io.flow.token.v0.models.Token])
          case r if r.status == 401 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.token.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getCleartextById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.Cleartext] = {
        _executeRequest("GET", s"/tokens/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/cleartext", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.token.v0.Client.parseJson("io.flow.token.v0.models.Cleartext", r, _.validate[io.flow.token.v0.models.Cleartext])
          case r if r.status == 401 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.token.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def postAuthentications(
        tokenAuthenticationForm: io.flow.token.v0.models.TokenAuthenticationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.TokenReference] = {
        val payload = play.api.libs.json.Json.toJson(tokenAuthenticationForm)

        _executeRequest("POST", s"/tokens/authentications", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.token.v0.Client.parseJson("io.flow.token.v0.models.TokenReference", r, _.validate[io.flow.token.v0.models.TokenReference])
          case r if r.status == 401 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.token.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.token.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/tokens/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.token.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object TokenValidations extends TokenValidations {
      override def post(
        tokenValidationForm: io.flow.token.v0.models.TokenValidationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.TokenValidation] = {
        val payload = play.api.libs.json.Json.toJson(tokenValidationForm)

        _executeRequest("POST", s"/token-validations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.token.v0.Client.parseJson("io.flow.token.v0.models.TokenValidation", r, _.validate[io.flow.token.v0.models.TokenValidation])
          case r if r.status == 401 => throw io.flow.token.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.token.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.token.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).withHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHttpHeaders(_withJsonContentType(requestHeaders):_*).withQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHttpHeaders(_withJsonContentType(requestHeaders):_*).withQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.token.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def organizationTokens: io.flow.token.v0.OrganizationTokens
      def partnerTokens: io.flow.token.v0.PartnerTokens
      def tokens: io.flow.token.v0.Tokens
      def tokenValidations: io.flow.token.v0.TokenValidations
    }

  }

  trait OrganizationTokens {
    /**
     * Get all tokens for the specifed organization
     * 
     * @param mine Filter to tokens created by the requesting user
     */
    def get(
      organization: String,
      id: _root_.scala.Option[Seq[String]] = None,
      mine: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.token.v0.models.OrganizationToken]]

    /**
     * Create a new organization
     */
    def post(
      organization: String,
      organizationTokenForm: io.flow.token.v0.models.OrganizationTokenForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.OrganizationToken]
  }

  trait PartnerTokens {
    /**
     * Get all tokens for the specifed partner
     * 
     * @param mine Filter to tokens created by the requesting user
     */
    def get(
      partner: String,
      id: _root_.scala.Option[Seq[String]] = None,
      mine: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.token.v0.models.PartnerToken]]

    /**
     * Create a new partner
     */
    def post(
      partner: String,
      partnerTokenForm: io.flow.token.v0.models.PartnerTokenForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.PartnerToken]
  }

  trait Tokens {
    /**
     * Get all tokens that you are authorized to view. Note that the cleartext token
     * value is never sent. To view the API token itself, see the resource path
     * /tokens/:id/cleartext
     * 
     * @param organization Filter to tokens created for this organization
     * @param partner Filter to tokens created for this partner
     * @param mine Filter to tokens created by the requesting user
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[String] = None,
      partner: _root_.scala.Option[String] = None,
      mine: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.token.v0.models.Token]]

    /**
     * Get metadata for the token with this ID
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.Token]

    /**
     * Retrieves the token with the actual string token in cleartext
     */
    def getCleartextById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.Cleartext]

    /**
     * Preferred method to validate a token, obtaining specific information if the
     * token is valid (or a 404 if the token does not exist). We use an HTTP POST with
     * a form body to enusre that the token itself is not logged in the request logs.
     */
    def postAuthentications(
      tokenAuthenticationForm: io.flow.token.v0.models.TokenAuthenticationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.TokenReference]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait TokenValidations {
    def post(
      tokenValidationForm: io.flow.token.v0.models.TokenValidationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.TokenValidation]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.token.v0.models.json._

    case class GenericErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val genericError = _root_.io.flow.token.v0.Client.parseJson("io.flow.error.v0.models.GenericError", response, _.validate[io.flow.error.v0.models.GenericError])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}