/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.3.18
 * apidoc:0.11.86 http://www.apidoc.me/flow/token/0.3.18/play_2_4_mock_client
 */
package io.flow.token.v0.mock {

  trait Client extends io.flow.token.v0.interfaces.Client {

    val baseUrl: String = "http://mock.localhost"

    override def organizationTokens: MockOrganizationTokens = MockOrganizationTokensImpl
    override def partnerTokens: MockPartnerTokens = MockPartnerTokensImpl
    override def tokens: MockTokens = MockTokensImpl
    override def tokenValidations: MockTokenValidations = MockTokenValidationsImpl

  }

  object MockOrganizationTokensImpl extends MockOrganizationTokens

  trait MockOrganizationTokens extends io.flow.token.v0.OrganizationTokens {

    /**
     * Get all tokens for the specifed organization
     */
    def get(
      organization: String,
      id: _root_.scala.Option[Seq[String]] = None,
      mine: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.token.v0.models.OrganizationToken]] = scala.concurrent.Future.successful {
      Nil
    }

  }

  object MockPartnerTokensImpl extends MockPartnerTokens

  trait MockPartnerTokens extends io.flow.token.v0.PartnerTokens {

    /**
     * Get all tokens for the specifed partner
     */
    def get(
      partner: String,
      id: _root_.scala.Option[Seq[String]] = None,
      mine: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.token.v0.models.PartnerToken]] = scala.concurrent.Future.successful {
      Nil
    }

  }

  object MockTokensImpl extends MockTokens

  trait MockTokens extends io.flow.token.v0.Tokens {

    /**
     * Get all tokens that you are authorized to view. Note that the cleartext token
     * value is never sent. To view the API token itself, see the resource path
     * /tokens/:id/cleartext
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[String] = None,
      partner: _root_.scala.Option[String] = None,
      mine: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.token.v0.models.Token]] = scala.concurrent.Future.successful {
      Nil
    }

    /**
     * Get metadata for the token with this ID
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.Token] = scala.concurrent.Future.successful {
      io.flow.token.v0.mock.Factories.makeToken()
    }

    /**
     * Retrieves the token with the actual string token in cleartext
     */
    def getCleartextById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.Cleartext] = scala.concurrent.Future.successful {
      io.flow.token.v0.mock.Factories.makeCleartext()
    }

    /**
     * Preferred method to validate a token, obtaining specific information if the
     * token is valid (or a 404 if the token does not exist). We use an HTTP POST with
     * a form body to enusre that the token itself is not logged in the request logs.
     */
    def postAuthentications(
      tokenAuthenticationForm: io.flow.token.v0.models.TokenAuthenticationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.TokenReference] = scala.concurrent.Future.successful {
      io.flow.token.v0.mock.Factories.makeTokenReference()
    }

    /**
     * Create a new token for the requesting user
     */
    def post(
      tokenForm: io.flow.token.v0.models.TokenForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.Token] = scala.concurrent.Future.successful {
      io.flow.token.v0.mock.Factories.makeToken()
    }

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = scala.concurrent.Future.successful {
      // unit type
    }

  }

  object MockTokenValidationsImpl extends MockTokenValidations

  trait MockTokenValidations extends io.flow.token.v0.TokenValidations {

    def post(
      tokenValidationForm: io.flow.token.v0.models.TokenValidationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.TokenValidation] = scala.concurrent.Future.successful {
      io.flow.token.v0.mock.Factories.makeTokenValidation()
    }

  }

  object Factories {

    def randomString(): String = {
      "Test " + _root_.java.util.UUID.randomUUID.toString.replaceAll("-", " ")
    }

    def makeCleartext(): io.flow.token.v0.models.Cleartext = io.flow.token.v0.models.Cleartext(
      value = Factories.randomString()
    )

    def makeOrganizationToken(): io.flow.token.v0.models.OrganizationToken = io.flow.token.v0.models.OrganizationToken(
      id = Factories.randomString(),
      organization = io.flow.common.v0.mock.Factories.makeOrganizationReference(),
      user = io.flow.common.v0.mock.Factories.makeUserReference(),
      environment = io.flow.common.v0.mock.Factories.makeEnvironment(),
      partial = Factories.randomString(),
      createdAt = org.joda.time.DateTime.now,
      description = None
    )

    def makeOrganizationTokenForm(): io.flow.token.v0.models.OrganizationTokenForm = io.flow.token.v0.models.OrganizationTokenForm(
      organization = Factories.randomString(),
      environment = io.flow.common.v0.mock.Factories.makeEnvironment(),
      description = None
    )

    def makeOrganizationTokenReference(): io.flow.token.v0.models.OrganizationTokenReference = io.flow.token.v0.models.OrganizationTokenReference(
      id = Factories.randomString(),
      organization = io.flow.common.v0.mock.Factories.makeOrganizationReference(),
      environment = io.flow.common.v0.mock.Factories.makeEnvironment(),
      user = io.flow.common.v0.mock.Factories.makeUserReference()
    )

    def makePartnerToken(): io.flow.token.v0.models.PartnerToken = io.flow.token.v0.models.PartnerToken(
      id = Factories.randomString(),
      partner = io.flow.token.v0.mock.Factories.makeTokenPartnerReference(),
      user = io.flow.common.v0.mock.Factories.makeUserReference(),
      environment = io.flow.common.v0.mock.Factories.makeEnvironment(),
      partial = Factories.randomString(),
      createdAt = org.joda.time.DateTime.now,
      description = None
    )

    def makePartnerTokenForm(): io.flow.token.v0.models.PartnerTokenForm = io.flow.token.v0.models.PartnerTokenForm(
      partner = Factories.randomString(),
      environment = io.flow.common.v0.mock.Factories.makeEnvironment(),
      description = None
    )

    def makePartnerTokenReference(): io.flow.token.v0.models.PartnerTokenReference = io.flow.token.v0.models.PartnerTokenReference(
      id = Factories.randomString(),
      partner = io.flow.token.v0.mock.Factories.makeTokenPartnerReference(),
      environment = io.flow.common.v0.mock.Factories.makeEnvironment(),
      user = io.flow.common.v0.mock.Factories.makeUserReference()
    )

    def makeTokenAuthenticationForm(): io.flow.token.v0.models.TokenAuthenticationForm = io.flow.token.v0.models.TokenAuthenticationForm(
      token = Factories.randomString()
    )

    def makeTokenPartnerReference(): io.flow.token.v0.models.TokenPartnerReference = io.flow.token.v0.models.TokenPartnerReference(
      id = Factories.randomString()
    )

    def makeTokenValidation(): io.flow.token.v0.models.TokenValidation = io.flow.token.v0.models.TokenValidation(
      status = Factories.randomString()
    )

    def makeTokenValidationForm(): io.flow.token.v0.models.TokenValidationForm = io.flow.token.v0.models.TokenValidationForm(
      token = Factories.randomString()
    )

    def makeToken(): io.flow.token.v0.models.Token = io.flow.token.v0.mock.Factories.makeOrganizationToken()

    def makeTokenForm(): io.flow.token.v0.models.TokenForm = io.flow.token.v0.mock.Factories.makeOrganizationTokenForm()

    def makeTokenReference(): io.flow.token.v0.models.TokenReference = io.flow.token.v0.mock.Factories.makeOrganizationTokenReference()

  }

}