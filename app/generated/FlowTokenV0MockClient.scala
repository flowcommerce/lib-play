/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.45
 * apidoc:0.11.29 http://www.apidoc.me/flow/token/0.0.45/play_2_4_mock_client
 */
package io.flow.token.v0.mock {

  trait Client extends io.flow.token.v0.interfaces.Client {

    val baseUrl = "http://mock.localhost"

    override def tokens: MockTokens = MockTokensImpl
    override def validations: MockValidations = MockValidationsImpl

  }

  object MockTokensImpl extends MockTokens

  trait MockTokens extends io.flow.token.v0.Tokens {

    /**
     * Get users by token
     */
    def get(
      token: Seq[String],
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.token.v0.models.TokenReference]] = scala.concurrent.Future {
      Nil
    }

    /**
     * Get the user for this specified token
     */
    def getByToken(
      token: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.TokenReference] = scala.concurrent.Future {
      io.flow.token.v0.mock.Factories.makeTokenReference()
    }

    /**
     * Get all tokens for a user
     */
    def getByUserId(
      userId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.token.v0.models.Token]] = scala.concurrent.Future {
      Nil
    }

    /**
     * Get the user for this specified token if it is valid
     */
    def getAuthenticateByToken(
      token: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.TokenReference] = scala.concurrent.Future {
      io.flow.token.v0.mock.Factories.makeTokenReference()
    }

    /**
     * Create a user token
     */
    def post(
      tokenForm: io.flow.token.v0.models.TokenForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.Token] = scala.concurrent.Future {
      io.flow.token.v0.mock.Factories.makeToken()
    }

    def deleteByToken(
      token: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = scala.concurrent.Future {
      // unit type
    }

  }

  object MockValidationsImpl extends MockValidations

  trait MockValidations extends io.flow.token.v0.Validations {

    def post(
      validationForm: io.flow.token.v0.models.ValidationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.token.v0.models.Validation] = scala.concurrent.Future {
      io.flow.token.v0.mock.Factories.makeValidation()
    }

  }

  object Factories {

    def randomString(): String = {
      "Test " + _root_.java.util.UUID.randomUUID.toString.replaceAll("-", " ")
    }

    def makeToken() = io.flow.token.v0.models.Token(
      user = io.flow.common.v0.mock.Factories.makeUserReference(),
      description = randomString(),
      value = None
    )

    def makeTokenForm() = io.flow.token.v0.models.TokenForm(
      userId = randomString(),
      description = randomString()
    )

    def makeTokenReference() = io.flow.token.v0.models.TokenReference(
      user = io.flow.common.v0.mock.Factories.makeUserReference()
    )

    def makeValidation() = io.flow.token.v0.models.Validation(
      status = randomString(),
      description = None
    )

    def makeValidationForm() = io.flow.token.v0.models.ValidationForm(
      token = randomString()
    )

  }

}